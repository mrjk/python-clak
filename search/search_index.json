{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#clak","title":"Clak","text":"<p>Clak (Command Line avec Klass) is a Python library that simplifies the creation of complex command-line interfaces using a class-based approach. It extends Python's <code>argparse</code> to provide an elegant and maintainable way to define nested commands and arguments.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Hierarchical command based structure built with python class. No need to learn a new framewok, just use Python!</li> <li>Easy to use, easy to extend, easy to understand. Focus on your app, not your CLI.</li> <li>Based on Python Argparser. All what your learned is still useful, you wont be lost as it follows the same syntax.</li> <li>Light and minimalistic, while providing standard features via optional components.</li> </ul> <ul> <li>\ud83c\udfaf Class-based command-line interface definition</li> <li>\ud83c\udf33 Easy nested subcommand creation</li> <li>\ud83d\udd04 Automatic help formatting with command tree display</li> <li>\ud83c\udfa8 Clean and intuitive API for defining arguments</li> <li>\ud83d\udce6 Inheritance-based command organization</li> <li>\ud83d\ude80 Built on top of Python's standard <code>argparse</code></li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.9 or higher</li> <li>argparse (built into Python)</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Add <code>clak</code> to your project dependecies:</p> <pre><code>pip install clak\n\n# If you use one of those\npoetry add clak\npdm add clak\n</code></pre> <p>Here's a simple example showing how to create a simple git-like command structure:</p> <p>```python demo.py from clak import Parser, Argument, Command</p> <p>class ShowCommand(Parser):     target = Argument('--target', '-t', help='Target to show')     format = Argument('--format', choices=['json', 'text'], help='Output format')</p> <p>class MainApp(Parser):     debug = Argument('--debug', action='store_true', help='Enable debug mode')     config = Argument('--config', '-c', help='Config file path')</p> <pre><code># Define subcommands\nshow = Command(ShowCommand, help='Show something', choices=['phone', 'email', 'address'])\n</code></pre>"},{"location":"#instanciate-your-app-parse-command-line-and-run-appropiate-command","title":"Instanciate your app, parse command line and run appropiate command.","text":"<p>MainApp().dispatch() <pre><code>This will create a CLI with the following structure:\n\n```bash\n$ python demo.py --help\nmyapp [-h] [--debug] [--config CONFIG] {show} ...\n  show [-h] [--target TARGET] [--format {json,text}]\n</code></pre></p>"},{"location":"#key-concepts","title":"Key Concepts","text":""},{"location":"#arguments","title":"Arguments","text":"<p>Define arguments using the <code>Argument</code> class:</p> <pre><code>class MyCommand(ArgumentParserPlus):\n    # As class attributes\n    verbose = Argument('-v', '--verbose', action='store_true', help='Verbose output')\n\n    # Or in __cli__dict__\n    __cli__dict__ = {\n        'output': Argument('--output', '-o', help='Output file')\n    }\n</code></pre>"},{"location":"#nested-commands","title":"Nested Commands","text":"<p>Create complex command hierarchies using the <code>Command</code> class:</p> <pre><code>class MainApp(ArgumentParserPlus):\n    # As class attributes\n    status = Command(StatusCommand, help='Show status')\n\n    # Or in __cli__dict__\n    __cli__dict__ = {\n        'config': Command(ConfigCommand, help='Configure settings')\n    }\n</code></pre>"},{"location":"#advanced-usage","title":"Advanced Usage","text":"<p>Check the <code>examples/</code> directory in the source code for more complex examples including: - Multi-level command nesting - Argument inheritance - Custom help formatting - Command grouping</p>"},{"location":"#todo","title":"TODO","text":"<p>Implementation:</p> <ul> <li> Use more argparse plugins mechanisms</li> </ul> <p>Features:</p> <ul> <li> Add support for <code>argcomplete</code></li> <li> Add support for argparse Argument groups<ul> <li>Argument groups</li> <li>Mutual exclusive groups</li> </ul> </li> <li> Add support for intermixed arguments<ul> <li>Intermixed arguments</li> </ul> </li> <li> Add support for <code>fire</code></li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>From reporting a bug to submitting a pull request: every contribution is appreciated and welcome. Report bugs, ask questions and request features using Github issues. If you want to contribute to the code of this project, please read the Contribution Guidelines.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the GPL v3 License.</p>"},{"location":"api/module/","title":"Module","text":""},{"location":"api/module/#clak","title":"<code>clak</code>","text":"<p>Clak: A Command Line Application Kit.</p> <p>Clak is a framework for building command line applications in Python. It extends and enhances Python's argparse with features like:</p> <ul> <li>Simplified parser composition and inheritance</li> <li>Rich command completion support</li> <li>XDG config file integration</li> <li>Structured logging configuration</li> <li>Recursive subcommand handling</li> </ul> <p>The framework provides both a classic API compatible with argparse and a modern, more declarative API for defining commands.</p> <p>Key components: - Parser: Enhanced ArgumentParser with plugin support - SubParser: For creating command hierarchies - CompRenderCmdMixin: For command completion - XDGConfigMixin: For config file handling - LoggingOptMixin: For logging setup</p>"},{"location":"api/nodes/","title":"Module API - Nodes","text":""},{"location":"api/nodes/#clak.nodes","title":"<code>clak.nodes</code>","text":"<p>Core node classes and utilities for the Clak framework.</p> <p>This module provides the foundational classes and types used throughout Clak for building command-line interfaces. It includes special null-type markers for handling unset values and configuration inheritance.</p> <p>Key components: - NullType: Base class for special null-type markers - NotSet: Marker for unset configuration values  - UnSetArg: Marker for unset command arguments - Node: Base class for building hierarchical command structures - Fn: Function wrapper for command handlers</p>"},{"location":"api/nodes/#clak.nodes.ConfigurationError","title":"<code>ConfigurationError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when a configuration setting cannot be found.</p> Source code in <code>clak/nodes.py</code> <pre><code>class ConfigurationError(Exception):\n    \"\"\"Raised when a configuration setting cannot be found.\"\"\"\n</code></pre>"},{"location":"api/nodes/#clak.nodes.Default","title":"<code>Default</code>","text":"<p>               Bases: <code>NullType</code></p> <p>Represent a default.</p> <p>Simple marker class intentionally containing minimal functionality.</p> Source code in <code>clak/nodes.py</code> <pre><code>class Default(NullType):\n    \"\"\"Represent a default.\n\n    Simple marker class intentionally containing minimal functionality.\n    \"\"\"\n\n    def repr(self):\n        return \"&lt;DEFAULT&gt;\"\n</code></pre>"},{"location":"api/nodes/#clak.nodes.Failure","title":"<code>Failure</code>","text":"<p>               Bases: <code>NullType</code></p> <p>Represent a failure.</p> <p>Simple marker class intentionally containing minimal functionality.</p> Source code in <code>clak/nodes.py</code> <pre><code>class Failure(NullType):\n    \"\"\"Represent a failure.\n\n    Simple marker class intentionally containing minimal functionality.\n    \"\"\"\n\n    def repr(self):\n        return \"&lt;FAILURE&gt;\"\n</code></pre>"},{"location":"api/nodes/#clak.nodes.Fn","title":"<code>Fn</code>","text":"<p>               Bases: <code>SimpleNamespace</code></p> <p>A simple namespace that keeps in memory its init arguments.</p> <p>This class is intentionally minimal as it serves as a function wrapper.</p> Source code in <code>clak/nodes.py</code> <pre><code>class Fn(SimpleNamespace):\n    \"\"\"A simple namespace that keeps in memory its init arguments.\n\n    This class is intentionally minimal as it serves as a function wrapper.\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__()\n        self.args = args\n        self.kwargs = kwargs\n</code></pre>"},{"location":"api/nodes/#clak.nodes.MissingMetaError","title":"<code>MissingMetaError</code>","text":"<p>               Bases: <code>ConfigurationError</code></p> <p>Raised when a meta setting is not declared before being used.</p> Source code in <code>clak/nodes.py</code> <pre><code>class MissingMetaError(ConfigurationError):\n    \"\"\"Raised when a meta setting is not declared before being used.\"\"\"\n</code></pre>"},{"location":"api/nodes/#clak.nodes.Node","title":"<code>Node</code>","text":"<p>New version and simpler version of node</p> Source code in <code>clak/nodes.py</code> <pre><code>class Node:\n    \"New version and simpler version of node\"\n\n    name: str = None\n    parent: \"Node\" = None\n\n    class Meta:\n        \"\"\"Class to store class-level configuration overrides.\n\n        This is intentionally an empty class used as a configuration container.\n        \"\"\"\n\n    def __init__(self, name=UNSET_ARG, parent=None):\n\n        # Initialize name\n        self.name = (\n            name if name is not UNSET_ARG else f\"{self.__class__.__name__}\"\n        )  # ({hex(id(self))})\"\n        assert isinstance(self.name, str)  # To unit test\n\n        # Initialize parent\n        self.parent = parent\n        assert isinstance(self.parent, (Node, type(None)))  # To unit test\n\n    def get_hierarchy(self):\n        \"Return the hierarchy of the node\"\n\n        hierarchy = []\n        current = self\n        while current is not None:\n            hierarchy.append(current)\n            current = current.parent\n        hierarchy.reverse()\n        return hierarchy\n\n    def get_name(self, attr=\"name\", default=UNSET_ARG):\n        \"Return the name of the parser\"\n        if default is not UNSET_ARG:\n            return getattr(self, attr, default)\n        return getattr(self, attr)\n\n    def get_fname(self, attr=\"name\"):\n        \"Return the full name of the parser\"\n        parents = self.get_hierarchy()\n\n        if parents:\n            fname = [x.get_name(attr=attr, default=None) or \"\" for x in parents]\n            return \".\".join(fname) or \"\"\n        return \"\"\n\n    def query_cfg_parents(  # pylint: disable=too-many-branches\n        self,\n        name: str,\n        default: Any = UNSET_ARG,\n        include_self: bool = True,\n        report: bool = False,\n    ) -&gt; Union[Any, Tuple[Any, Union[str, List[str]]]]:\n        \"\"\"Query configuration from parent objects in the hierarchy.\n\n        Args:\n            name: Configuration setting name to query\n            default: Default value if setting is not found\n            include_self: Whether to include this node in the search\n            report: Whether to return detailed report of the search\n\n        Returns:\n            If report=False:\n                The configuration value found in the hierarchy or default\n            If report=True:\n                Tuple of (value, report_str) where report_str contains search details\n\n        Raises:\n            ConfigurationError: If no parent exists, include_self=False, and no default provided\n        \"\"\"\n\n        # Fast exit or raise exception\n        if not self.parent and include_self is False:\n            if default is not UNSET_ARG:\n                if report:\n                    return default, \"No parents, return default value\"\n                return default\n            msg = (\n                f\"Setting '{name}' has not been declared in hierarchy of '{repr(self)}'\"\n            )\n            raise ConfigurationError(msg)\n\n        # Prepare lookup chain\n        _report = []\n        parents = self.get_hierarchy()\n        if include_self is False:\n            parents = parents[:-1]\n        parents.reverse()  # Start from self/immediate parent\n        out = NOT_SET\n        last_checked_parent = None\n\n        declared = False\n        for parent in parents:\n            last_checked_parent = parent\n            _report.append(f\"Check '{name}' in parent {parent}\")\n\n            # If not found in direct attribute, try query_cfg_inst\n            try:\n                out, _report2 = parent.query_cfg_inst(\n                    name,\n                    default=NOT_SET,\n                    report=True,\n                    raise_on_undeclared=True,\n                )\n                declared = declared or True\n                _report.append(_report2)\n                if out is not NOT_SET:\n                    _report.append(f\"Found '{name}' in parent {parent}= {out}\")\n                    break\n            except MissingMetaError:\n                declared = declared or False\n                continue\n            except IndexError:\n                declared = declared or False\n                continue\n\n        if not declared:\n            msg = (\n                f\"Missing 'meta__config__{name}',\"\n                + \"this option has not been declared in any parents of'{repr(self)}'\"\n            )\n            raise MissingMetaError(msg)\n\n        if out is NOT_SET:\n            _report.append(f\"NotFound '{name}' in parent: {last_checked_parent}\")\n        if out is NOT_SET and default is not UNSET_ARG:\n            out = default\n        elif out is NOT_SET:\n            msg = (\n                f\"Setting '{name}' has not been declared in hierarchy of '{repr(self)}'\"\n            )\n            raise ConfigurationError(msg)\n\n        if report:\n            return out, _report\n        return out\n\n    def query_cfg_inst(  # pylint: disable=too-many-positional-arguments,too-many-arguments\n        self,\n        name,\n        override=None,\n        default=UNSET_ARG,\n        report=False,\n        raise_on_undeclared=False,\n    ):\n        \"Query configuration from instance\"\n\n        # if not hasattr(self, f\"meta__config__{name}\"):\n        if raise_on_undeclared and getattr(self, f\"meta__config__{name}\", None) is None:\n            msg = (\n                f\"Missing 'meta__config__{name}',\"\n                \" this option has not been declared '{repr(self)}'\"\n            )\n            raise MissingMetaError(msg)\n\n        def _query():\n            \"Helper to process query\"\n\n            query_from = []\n\n            # Fetch from dict override, if provided\n            if isinstance(override, dict):\n                val = override.get(name, NOT_SET)\n                if val is not NOT_SET:\n                    query_from.append(f\"dict_override:{name}\")\n                    return val, query_from\n\n            # Fetch from self._NAME\n            # Good for initial setup, if write mode is required\n            val = getattr(self, f\"_{name}\", NOT_SET)\n            if val is not NOT_SET:\n                query_from.append(f\"self_attr:_{name}\")\n                return val, query_from\n\n            # Python class params\n            # Good for class overrides\n            cls = self\n            if hasattr(cls, \"Meta\"):\n                val = getattr(cls.Meta, name, NOT_SET)\n                if val is not NOT_SET:\n                    query_from.append(f\"self_meta:Meta.{name}\")\n                    # print (\"SELF CLASS Meta retrieval for: {cls}\" , name, val)\n                    return val, query_from\n\n            # Fetch from self.meta__NAME\n            # Python class inherited params (good for defaults)\n            val = getattr(self, f\"meta__{name}\", NOT_SET)\n            if val is not NOT_SET:\n                query_from.append(f\"self_attr:meta__{name}\")\n                return val, query_from\n\n            # Return default if set\n            if default is not UNSET_ARG:\n                query_from.append(\"default_arg\")\n                return default, query_from\n\n            # Raise error if not found\n            msg = (\n                f\"Setting '{name}' has not been declared before being used\"\n                f\" in '{repr(self)}', tried to query: {query_from}\"\n            )\n            raise IndexError(msg)\n\n        # Return output\n        out, _report = _query()\n\n        # Ensure we always deliver copies\n        if isinstance(out, (dict, list)):\n            out = copy.copy(out)\n\n        if report:\n            return out, _report\n        return out\n</code></pre>"},{"location":"api/nodes/#clak.nodes.Node.Meta","title":"<code>Meta</code>","text":"<p>Class to store class-level configuration overrides.</p> <p>This is intentionally an empty class used as a configuration container.</p> Source code in <code>clak/nodes.py</code> <pre><code>class Meta:\n    \"\"\"Class to store class-level configuration overrides.\n\n    This is intentionally an empty class used as a configuration container.\n    \"\"\"\n</code></pre>"},{"location":"api/nodes/#clak.nodes.Node.get_fname","title":"<code>get_fname(attr='name')</code>","text":"<p>Return the full name of the parser</p> Source code in <code>clak/nodes.py</code> <pre><code>def get_fname(self, attr=\"name\"):\n    \"Return the full name of the parser\"\n    parents = self.get_hierarchy()\n\n    if parents:\n        fname = [x.get_name(attr=attr, default=None) or \"\" for x in parents]\n        return \".\".join(fname) or \"\"\n    return \"\"\n</code></pre>"},{"location":"api/nodes/#clak.nodes.Node.get_hierarchy","title":"<code>get_hierarchy()</code>","text":"<p>Return the hierarchy of the node</p> Source code in <code>clak/nodes.py</code> <pre><code>def get_hierarchy(self):\n    \"Return the hierarchy of the node\"\n\n    hierarchy = []\n    current = self\n    while current is not None:\n        hierarchy.append(current)\n        current = current.parent\n    hierarchy.reverse()\n    return hierarchy\n</code></pre>"},{"location":"api/nodes/#clak.nodes.Node.get_name","title":"<code>get_name(attr='name', default=UNSET_ARG)</code>","text":"<p>Return the name of the parser</p> Source code in <code>clak/nodes.py</code> <pre><code>def get_name(self, attr=\"name\", default=UNSET_ARG):\n    \"Return the name of the parser\"\n    if default is not UNSET_ARG:\n        return getattr(self, attr, default)\n    return getattr(self, attr)\n</code></pre>"},{"location":"api/nodes/#clak.nodes.Node.query_cfg_inst","title":"<code>query_cfg_inst(name, override=None, default=UNSET_ARG, report=False, raise_on_undeclared=False)</code>","text":"<p>Query configuration from instance</p> Source code in <code>clak/nodes.py</code> <pre><code>def query_cfg_inst(  # pylint: disable=too-many-positional-arguments,too-many-arguments\n    self,\n    name,\n    override=None,\n    default=UNSET_ARG,\n    report=False,\n    raise_on_undeclared=False,\n):\n    \"Query configuration from instance\"\n\n    # if not hasattr(self, f\"meta__config__{name}\"):\n    if raise_on_undeclared and getattr(self, f\"meta__config__{name}\", None) is None:\n        msg = (\n            f\"Missing 'meta__config__{name}',\"\n            \" this option has not been declared '{repr(self)}'\"\n        )\n        raise MissingMetaError(msg)\n\n    def _query():\n        \"Helper to process query\"\n\n        query_from = []\n\n        # Fetch from dict override, if provided\n        if isinstance(override, dict):\n            val = override.get(name, NOT_SET)\n            if val is not NOT_SET:\n                query_from.append(f\"dict_override:{name}\")\n                return val, query_from\n\n        # Fetch from self._NAME\n        # Good for initial setup, if write mode is required\n        val = getattr(self, f\"_{name}\", NOT_SET)\n        if val is not NOT_SET:\n            query_from.append(f\"self_attr:_{name}\")\n            return val, query_from\n\n        # Python class params\n        # Good for class overrides\n        cls = self\n        if hasattr(cls, \"Meta\"):\n            val = getattr(cls.Meta, name, NOT_SET)\n            if val is not NOT_SET:\n                query_from.append(f\"self_meta:Meta.{name}\")\n                # print (\"SELF CLASS Meta retrieval for: {cls}\" , name, val)\n                return val, query_from\n\n        # Fetch from self.meta__NAME\n        # Python class inherited params (good for defaults)\n        val = getattr(self, f\"meta__{name}\", NOT_SET)\n        if val is not NOT_SET:\n            query_from.append(f\"self_attr:meta__{name}\")\n            return val, query_from\n\n        # Return default if set\n        if default is not UNSET_ARG:\n            query_from.append(\"default_arg\")\n            return default, query_from\n\n        # Raise error if not found\n        msg = (\n            f\"Setting '{name}' has not been declared before being used\"\n            f\" in '{repr(self)}', tried to query: {query_from}\"\n        )\n        raise IndexError(msg)\n\n    # Return output\n    out, _report = _query()\n\n    # Ensure we always deliver copies\n    if isinstance(out, (dict, list)):\n        out = copy.copy(out)\n\n    if report:\n        return out, _report\n    return out\n</code></pre>"},{"location":"api/nodes/#clak.nodes.Node.query_cfg_parents","title":"<code>query_cfg_parents(name, default=UNSET_ARG, include_self=True, report=False)</code>","text":"<p>Query configuration from parent objects in the hierarchy.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Configuration setting name to query</p> required <code>default</code> <code>Any</code> <p>Default value if setting is not found</p> <code>UNSET_ARG</code> <code>include_self</code> <code>bool</code> <p>Whether to include this node in the search</p> <code>True</code> <code>report</code> <code>bool</code> <p>Whether to return detailed report of the search</p> <code>False</code> <p>Returns:</p> Type Description <code>Union[Any, Tuple[Any, Union[str, List[str]]]]</code> <p>If report=False: The configuration value found in the hierarchy or default</p> <code>Union[Any, Tuple[Any, Union[str, List[str]]]]</code> <p>If report=True: Tuple of (value, report_str) where report_str contains search details</p> <p>Raises:</p> Type Description <code>ConfigurationError</code> <p>If no parent exists, include_self=False, and no default provided</p> Source code in <code>clak/nodes.py</code> <pre><code>def query_cfg_parents(  # pylint: disable=too-many-branches\n    self,\n    name: str,\n    default: Any = UNSET_ARG,\n    include_self: bool = True,\n    report: bool = False,\n) -&gt; Union[Any, Tuple[Any, Union[str, List[str]]]]:\n    \"\"\"Query configuration from parent objects in the hierarchy.\n\n    Args:\n        name: Configuration setting name to query\n        default: Default value if setting is not found\n        include_self: Whether to include this node in the search\n        report: Whether to return detailed report of the search\n\n    Returns:\n        If report=False:\n            The configuration value found in the hierarchy or default\n        If report=True:\n            Tuple of (value, report_str) where report_str contains search details\n\n    Raises:\n        ConfigurationError: If no parent exists, include_self=False, and no default provided\n    \"\"\"\n\n    # Fast exit or raise exception\n    if not self.parent and include_self is False:\n        if default is not UNSET_ARG:\n            if report:\n                return default, \"No parents, return default value\"\n            return default\n        msg = (\n            f\"Setting '{name}' has not been declared in hierarchy of '{repr(self)}'\"\n        )\n        raise ConfigurationError(msg)\n\n    # Prepare lookup chain\n    _report = []\n    parents = self.get_hierarchy()\n    if include_self is False:\n        parents = parents[:-1]\n    parents.reverse()  # Start from self/immediate parent\n    out = NOT_SET\n    last_checked_parent = None\n\n    declared = False\n    for parent in parents:\n        last_checked_parent = parent\n        _report.append(f\"Check '{name}' in parent {parent}\")\n\n        # If not found in direct attribute, try query_cfg_inst\n        try:\n            out, _report2 = parent.query_cfg_inst(\n                name,\n                default=NOT_SET,\n                report=True,\n                raise_on_undeclared=True,\n            )\n            declared = declared or True\n            _report.append(_report2)\n            if out is not NOT_SET:\n                _report.append(f\"Found '{name}' in parent {parent}= {out}\")\n                break\n        except MissingMetaError:\n            declared = declared or False\n            continue\n        except IndexError:\n            declared = declared or False\n            continue\n\n    if not declared:\n        msg = (\n            f\"Missing 'meta__config__{name}',\"\n            + \"this option has not been declared in any parents of'{repr(self)}'\"\n        )\n        raise MissingMetaError(msg)\n\n    if out is NOT_SET:\n        _report.append(f\"NotFound '{name}' in parent: {last_checked_parent}\")\n    if out is NOT_SET and default is not UNSET_ARG:\n        out = default\n    elif out is NOT_SET:\n        msg = (\n            f\"Setting '{name}' has not been declared in hierarchy of '{repr(self)}'\"\n        )\n        raise ConfigurationError(msg)\n\n    if report:\n        return out, _report\n    return out\n</code></pre>"},{"location":"api/nodes/#clak.nodes.NotSet","title":"<code>NotSet</code>","text":"<p>               Bases: <code>NullType</code></p> <p>Represent an unset arg.</p> <p>Simple marker class intentionally containing minimal functionality.</p> Source code in <code>clak/nodes.py</code> <pre><code>class NotSet(NullType):\n    \"\"\"Represent an unset arg.\n\n    Simple marker class intentionally containing minimal functionality.\n    \"\"\"\n\n    def repr(self):\n        return \"&lt;NOT_SET&gt;\"\n</code></pre>"},{"location":"api/nodes/#clak.nodes.NullType","title":"<code>NullType</code>","text":"<p>A special type that behaves as a replacement for None. We have to put a new default value to know if a variable has been set by the user explicitly. This is useful for the <code>CommandLine</code> loader, when CLI parsers force you to set a default value, and thus, break the discovery chain.</p> <p>This is intentionally a simple class with minimal methods as it serves as a base for null-type markers.</p> Source code in <code>clak/nodes.py</code> <pre><code>class NullType:\n    \"\"\"\n    A special type that behaves as a replacement for None.\n    We have to put a new default value to know if a variable has been set by\n    the user explicitly. This is useful for the ``CommandLine`` loader, when\n    CLI parsers force you to set a default value, and thus, break the discovery\n    chain.\n\n    This is intentionally a simple class with minimal methods as it serves\n    as a base for null-type markers.\n    \"\"\"\n\n    def repr(self):\n        \"Return string representation\"\n        return \"&lt;NONE_TYPE&gt;\"\n\n    def __str__(self):\n        return self.repr()\n\n    def __repr__(self):\n        return self.repr()\n\n    def __bool__(self):\n        return False\n</code></pre>"},{"location":"api/nodes/#clak.nodes.NullType.repr","title":"<code>repr()</code>","text":"<p>Return string representation</p> Source code in <code>clak/nodes.py</code> <pre><code>def repr(self):\n    \"Return string representation\"\n    return \"&lt;NONE_TYPE&gt;\"\n</code></pre>"},{"location":"api/nodes/#clak.nodes.UnSetArg","title":"<code>UnSetArg</code>","text":"<p>               Bases: <code>NullType</code></p> <p>Represent an unset arg.</p> <p>Simple marker class intentionally containing minimal functionality.</p> Source code in <code>clak/nodes.py</code> <pre><code>class UnSetArg(NullType):\n    \"\"\"Represent an unset arg.\n\n    Simple marker class intentionally containing minimal functionality.\n    \"\"\"\n\n    def repr(self):\n        return \"&lt;UNSET_ARG&gt;\"\n</code></pre>"},{"location":"api/parser/","title":"Module API - Parser","text":""},{"location":"api/parser/#clak.parser","title":"<code>clak.parser</code>","text":"<p>Clak ParserNode Module</p> <p>This module provides an enhanced command-line argument parsing system built on top of argparse. It supports hierarchical command structures, subcommands, and argument injection.</p> <p>Key Features:</p> <ul> <li>Hierarchical command structure support via subparsers</li> <li>Argument injection capabilities</li> <li>Enhanced help formatting</li> <li>Debug logging support</li> <li>Exception handling for clean program termination</li> </ul> <p>The module provides several key classes:</p> <ul> <li>ParserNode: Main parser class extending argparse functionality</li> <li>SubParser: For creating nested command structures </li> <li>Command: Alias for SubParser for compatibility</li> </ul> <p>Usage can be in either argparse-style:</p> <pre><code>ArgumentParser()\nArgument() \nSubParser()\n</code></pre> <p>Or Clak-style:</p> <pre><code>ClakParser()\nOpt()\nArg() \nCmd()\n</code></pre> <p>Debug logging can be enabled by setting CLAK_DEBUG=1 environment variable.</p>"},{"location":"api/parser/#clak.parser.ArgParseItem","title":"<code>ArgParseItem</code>","text":"<p>               Bases: <code>Fn</code></p> <p>Base class for argument parser items.</p> <p>This class represents a generic argument parser item that can be added to an argument parser. It provides common functionality for handling destinations and building parameter dictionaries.</p> <p>Attributes:</p> Name Type Description <code>_destination</code> <code>str</code> <p>The destination name for the argument value</p> Source code in <code>clak/parser.py</code> <pre><code>class ArgParseItem(Fn):\n    \"\"\"Base class for argument parser items.\n\n    This class represents a generic argument parser item that can be added to an argument parser.\n    It provides common functionality for handling destinations and building parameter dictionaries.\n\n    Attributes:\n        _destination (str): The destination name for the argument value\n    \"\"\"\n\n    _destination: str = None\n\n    @property\n    def destination(self) -&gt; Optional[str]:\n        \"\"\"Get the destination name for this argument.\n\n        Returns:\n            str: The destination name, derived from the argument name if not explicitly set\n            None: If no destination can be determined\n        \"\"\"\n        return self._get_best_dest()\n\n    @destination.setter\n    def destination(self, value):\n        self._destination = value\n\n    def _get_best_dest(self) -&gt; str:\n        \"Get the best destination name for this argument\"\n        if self._destination is not None:\n            return self._destination\n\n        # If no arguments, return None\n        if not self.args:\n            return None\n\n        # Get first argument which should be the flag name\n        arg = self.args[0]\n\n        # Remove leading dashes and convert remaining dashes to underscores\n        if arg.startswith(\"--\"):\n            key = arg[2:].replace(\"-\", \"_\")\n        elif arg.startswith(\"-\"):\n            # For short flags like -v, use the longer version if available\n            if len(self.args) &gt; 1 and self.args[1].startswith(\"--\"):\n                key = self.args[1][2:].replace(\"-\", \"_\")\n            else:\n                key = arg[1:]\n        else:\n            key = arg.replace(\"-\", \"_\")\n\n        return key\n\n    def build_params(self, dest: str) -&gt; Tuple[tuple, dict]:\n        \"\"\"Build parameter dictionary for argument parser.\n\n        Args:\n            dest (str): Destination name for the argument\n\n        Returns:\n            tuple: A tuple containing (args, kwargs) for argument parser\n\n        Raises:\n            ValueError: If no arguments are found\n        \"\"\"\n        # Create parser arguments\n        kwargs = self.kwargs\n\n        # kind = \"option\"\n        if len(self.args) &gt; 0:\n            if len(self.args) &gt; 2:\n                raise ValueError(\n                    f\"Too many arguments found for {self.__class__.__name__}: {self.args}\"\n                )\n\n            args = self.args\n\n            arg1 = args[0]\n            if not arg1.startswith(\"-\"):\n                # Remove first position arg to avoid argparse error:\n                # ValueError: dest supplied twice for positional argument\n                kwargs[\"metavar\"] = args[0]\n                args = ()\n                # kind = \"argument\"\n\n        elif dest:\n            if len(dest) &lt;= 2:\n                args = (f\"-{dest}\",)\n            else:\n                args = (f\"--{dest}\",)\n        else:\n            raise ValueError(\n                f\"No arguments found for {self.__class__.__name__}: {self.__dict__}\"\n            )\n\n        # Update dest if forced\n        if dest:\n            kwargs[\"dest\"] = dest\n\n        # if kind == \"argument\":\n        #     if \"dest\" in kwargs:\n        #         if len(args) == 1:\n        #             # Remove first position arg to avoid argparse error:\n        #             # ValueError: dest supplied twice for positional argument\n        #             kwargs[\"metavar\"] = args[0]\n        #             args = ()\n        #         else:\n        #             raise ValueError(\n        #                 f\"Too many arguments found for {self.__class__.__name__}: {self.__dict__}\"\n        #             )\n\n        return args, kwargs\n</code></pre>"},{"location":"api/parser/#clak.parser.ArgParseItem.destination","title":"<code>destination</code>  <code>property</code> <code>writable</code>","text":"<p>Get the destination name for this argument.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>Optional[str]</code> <p>The destination name, derived from the argument name if not explicitly set</p> <code>None</code> <code>Optional[str]</code> <p>If no destination can be determined</p>"},{"location":"api/parser/#clak.parser.ArgParseItem.build_params","title":"<code>build_params(dest)</code>","text":"<p>Build parameter dictionary for argument parser.</p> <p>Parameters:</p> Name Type Description Default <code>dest</code> <code>str</code> <p>Destination name for the argument</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <code>Tuple[tuple, dict]</code> <p>A tuple containing (args, kwargs) for argument parser</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If no arguments are found</p> Source code in <code>clak/parser.py</code> <pre><code>def build_params(self, dest: str) -&gt; Tuple[tuple, dict]:\n    \"\"\"Build parameter dictionary for argument parser.\n\n    Args:\n        dest (str): Destination name for the argument\n\n    Returns:\n        tuple: A tuple containing (args, kwargs) for argument parser\n\n    Raises:\n        ValueError: If no arguments are found\n    \"\"\"\n    # Create parser arguments\n    kwargs = self.kwargs\n\n    # kind = \"option\"\n    if len(self.args) &gt; 0:\n        if len(self.args) &gt; 2:\n            raise ValueError(\n                f\"Too many arguments found for {self.__class__.__name__}: {self.args}\"\n            )\n\n        args = self.args\n\n        arg1 = args[0]\n        if not arg1.startswith(\"-\"):\n            # Remove first position arg to avoid argparse error:\n            # ValueError: dest supplied twice for positional argument\n            kwargs[\"metavar\"] = args[0]\n            args = ()\n            # kind = \"argument\"\n\n    elif dest:\n        if len(dest) &lt;= 2:\n            args = (f\"-{dest}\",)\n        else:\n            args = (f\"--{dest}\",)\n    else:\n        raise ValueError(\n            f\"No arguments found for {self.__class__.__name__}: {self.__dict__}\"\n        )\n\n    # Update dest if forced\n    if dest:\n        kwargs[\"dest\"] = dest\n\n    # if kind == \"argument\":\n    #     if \"dest\" in kwargs:\n    #         if len(args) == 1:\n    #             # Remove first position arg to avoid argparse error:\n    #             # ValueError: dest supplied twice for positional argument\n    #             kwargs[\"metavar\"] = args[0]\n    #             args = ()\n    #         else:\n    #             raise ValueError(\n    #                 f\"Too many arguments found for {self.__class__.__name__}: {self.__dict__}\"\n    #             )\n\n    return args, kwargs\n</code></pre>"},{"location":"api/parser/#clak.parser.Argument","title":"<code>Argument</code>","text":"<p>               Bases: <code>ArgParseItem</code></p> <p>Represents an argument that can be added to an argument parser.</p> <p>This class handles both positional arguments and optional flags, automatically determining the appropriate type based on the argument format.</p> Source code in <code>clak/parser.py</code> <pre><code>class Argument(ArgParseItem):\n    \"\"\"Represents an argument that can be added to an argument parser.\n\n    This class handles both positional arguments and optional flags, automatically determining\n    the appropriate type based on the argument format.\n    \"\"\"\n\n    def attach_arg_to_parser(self, key: str, config: \"ParserNode\") -&gt; argparse.Action:\n        \"\"\"Create and add an argument to the parser.\n\n        Args:\n            key (str): The argument key/name\n            config (ParserNode): The parser configuration object\n\n        Returns:\n            argparse.Action: The created argument parser action\n        \"\"\"\n        parser = config.parser\n        args, kwargs = self.build_params(key)\n        assert isinstance(\n            args, tuple\n        ), f\"Args must be a list for {self.__class__.__name__}: {type(args)}\"\n\n        # Create argument\n        logger.debug(\n            \"Create new argument %s.%s: %s\",\n            config.get_fname(attr=\"key\"),\n            key,\n            self.kwargs,\n        )\n\n        parser.add_argument(*args, **kwargs)\n\n        return parser\n</code></pre>"},{"location":"api/parser/#clak.parser.Argument.attach_arg_to_parser","title":"<code>attach_arg_to_parser(key, config)</code>","text":"<p>Create and add an argument to the parser.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The argument key/name</p> required <code>config</code> <code>ParserNode</code> <p>The parser configuration object</p> required <p>Returns:</p> Type Description <code>Action</code> <p>argparse.Action: The created argument parser action</p> Source code in <code>clak/parser.py</code> <pre><code>def attach_arg_to_parser(self, key: str, config: \"ParserNode\") -&gt; argparse.Action:\n    \"\"\"Create and add an argument to the parser.\n\n    Args:\n        key (str): The argument key/name\n        config (ParserNode): The parser configuration object\n\n    Returns:\n        argparse.Action: The created argument parser action\n    \"\"\"\n    parser = config.parser\n    args, kwargs = self.build_params(key)\n    assert isinstance(\n        args, tuple\n    ), f\"Args must be a list for {self.__class__.__name__}: {type(args)}\"\n\n    # Create argument\n    logger.debug(\n        \"Create new argument %s.%s: %s\",\n        config.get_fname(attr=\"key\"),\n        key,\n        self.kwargs,\n    )\n\n    parser.add_argument(*args, **kwargs)\n\n    return parser\n</code></pre>"},{"location":"api/parser/#clak.parser.FormatEnv","title":"<code>FormatEnv</code>","text":"<p>               Bases: <code>dict</code></p> <p>Format env</p> Source code in <code>clak/parser.py</code> <pre><code>class FormatEnv(dict):\n    \"Format env\"\n\n    _default = {\n        \"type\": \"type FUNC\",\n    }\n\n    def __init__(self, variables=None):\n        self._variables = variables or {}\n\n    # def __str__(self):\n    #     return self.value.format(**self.variables)\n\n    def get(self):\n        \"Get dict of vars\"\n        out = {}\n        out.update(self._default)\n        out.update(self._variables)\n        return out\n\n    def __dict__(self):\n        return dict(self.get())\n</code></pre>"},{"location":"api/parser/#clak.parser.FormatEnv.get","title":"<code>get()</code>","text":"<p>Get dict of vars</p> Source code in <code>clak/parser.py</code> <pre><code>def get(self):\n    \"Get dict of vars\"\n    out = {}\n    out.update(self._default)\n    out.update(self._variables)\n    return out\n</code></pre>"},{"location":"api/parser/#clak.parser.MetaSetting","title":"<code>MetaSetting</code>","text":"<p>               Bases: <code>Fn</code></p> <p>A setting that is used to configure a node</p> Source code in <code>clak/parser.py</code> <pre><code>class MetaSetting(Fn):  # pylint: disable=too-few-public-methods\n    \"A setting that is used to configure a node\"\n</code></pre>"},{"location":"api/parser/#clak.parser.Parser","title":"<code>Parser</code>","text":"<p>               Bases: <code>ParserNode</code></p> <p>A simplified parser class that extends ParserNode.</p> <p>This class provides a more streamlined interface to ParserNode by: - Automatically parsing arguments on initialization - Maintaining compatibility with legacy argument parser names - Providing simpler command/argument creation methods</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>list</code> <p>Positional arguments passed to ParserNode</p> <code>()</code> <code>parse</code> <code>bool</code> <p>Whether to automatically parse arguments on init, only on root nodes</p> <code>True</code> <code>**kwargs</code> <code>dict</code> <p>Keyword arguments passed to ParserNode</p> <code>{}</code> Source code in <code>clak/parser.py</code> <pre><code>class Parser(ParserNode):\n    \"\"\"A simplified parser class that extends ParserNode.\n\n    This class provides a more streamlined interface to ParserNode by:\n    - Automatically parsing arguments on initialization\n    - Maintaining compatibility with legacy argument parser names\n    - Providing simpler command/argument creation methods\n\n    Args:\n        *args: Positional arguments passed to ParserNode\n        parse (bool): Whether to automatically parse arguments on init,\n            only on root nodes\n        **kwargs: Keyword arguments passed to ParserNode\n    \"\"\"\n\n    def __init__(self, *args: list, parse: bool = True, **kwargs: dict):\n        super().__init__(*args, **kwargs)\n\n        if not self.parent and parse is True:\n            logger.debug(\"Starting automatig arg_parse\")\n            self.dispatch(*args)\n</code></pre>"},{"location":"api/parser/#clak.parser.ParserNode","title":"<code>ParserNode</code>","text":"<p>               Bases: <code>Node</code></p> <p>An extensible argument parser that can be inherited to create custom CLIs.</p> <p>This class provides a framework for building complex command-line interfaces with: - Hierarchical subcommands - Automatic help generation - Plugin support - Custom argument types - Exception handling</p> <p>The parser can be extended by: 1. Subclassing and adding Argument instances as class attributes 2. Adding SubParser instances to create command hierarchies 3. Implementing cli_run() for command execution 4. Implementing cli_group() for command group behavior</p> <p>Attributes:</p> Name Type Description <code>arguments_dict</code> <code>dict</code> <p>Dictionary of argument name to ArgParseItem</p> <code>children</code> <code>dict</code> <p>Dictionary of subcommand name to subcommand class</p> <code>inject_as_subparser</code> <code>bool</code> <p>Whether to inject as subparser vs direct</p> <code>meta__name</code> <code>str</code> <p>ParserNode name</p> Source code in <code>clak/parser.py</code> <pre><code>class ParserNode(Node):  # pylint: disable=too-many-instance-attributes\n    \"\"\"An extensible argument parser that can be inherited to create custom CLIs.\n\n    This class provides a framework for building complex command-line interfaces with:\n    - Hierarchical subcommands\n    - Automatic help generation\n    - Plugin support\n    - Custom argument types\n    - Exception handling\n\n    The parser can be extended by:\n    1. Subclassing and adding Argument instances as class attributes\n    2. Adding SubParser instances to create command hierarchies\n    3. Implementing cli_run() for command execution\n    4. Implementing cli_group() for command group behavior\n\n    Attributes:\n        arguments_dict (dict): Dictionary of argument name to ArgParseItem\n        children (dict): Dictionary of subcommand name to subcommand class\n        inject_as_subparser (bool): Whether to inject as subparser vs direct\n        meta__name (str): ParserNode name\n    \"\"\"\n\n    arguments_dict: dict[str, ArgParseItem] = {}\n    children: dict[str, type] = {}  # Dictionary of subcommand name to subcommand class\n    inject_as_subparser: bool = True\n\n    meta__name: str = NOT_SET\n\n    meta__subcommands_dict: dict[str, SubParser] = {}\n    meta__arguments_dict: dict[str, Argument] = {}\n\n    meta__cli_view: ClakView = None\n\n    # Meta settings\n    meta__config__name = MetaSetting(\n        help=\"Name of the parser\",\n    )\n    meta__config__app_name = MetaSetting(\n        help=\"Name of the application\",\n    )\n    meta__config__app_proc_name = MetaSetting(\n        help=\"Name of the application processus\",\n    )\n    meta__config__help_usage = MetaSetting(\n        help=\"Message to display in help usage\",\n    )\n    meta__config__help_description = MetaSetting(\n        help=\"Message to display in help description\",\n    )\n    meta__config__help_epilog = MetaSetting(\n        help=\"Message to display in help epilog\",\n    )\n    meta__config__known_exceptions = MetaSetting(\n        help=\"List of known exceptions to handle\",\n    )\n\n    # Views support\n    meta__config__cli_view = MetaSetting(\n        help=\"class of the view to use\",\n    )\n\n    def __init__(  # pylint: disable=too-many-arguments,too-many-positional-arguments\n        self,\n        add_help: bool = True,\n        parent: \"ParserNode\" = None,\n        name: str = None,\n        key: str = None,\n        parser: argparse.ArgumentParser = None,\n        inject_as_subparser: bool = True,\n        proc_name: str = None,\n    ):\n        \"\"\"Initialize the parser.\n\n        Args:\n            add_help (bool): Whether to add help flags\n            parent (ParserNode): Parent parser instance\n            name (str): ParserNode name\n            key (str): ParserNode key\n            parser (ArgumentParser): Existing parser to use\n            inject_as_subparser (bool): Whether to inject as subparser\n            proc_name (str): Process name\n        \"\"\"\n\n        self.logger = logger\n\n        super().__init__(parent=parent)\n\n        self.name = self.query_cfg_parents(\"name\", default=self.__class__.__name__)\n        self.key = key\n        self.fkey = self.get_fname(attr=\"key\")\n        self.inject_as_subparser = inject_as_subparser\n        self.proc_name = proc_name\n        self.add_help = add_help\n\n        # Add children link\n        self.children = {}\n        self.registry = {}\n        if parent:\n            parent.children[self.key] = self\n            self.registry = parent.registry\n        self.registry[self.fkey] = self  # RegistryEntry(config=self)\n\n        # Create or reuse parent parser\n        if parser is None:\n            self.parser = self.create_parser()\n            self.proc_name = self.parser.prog\n        else:\n            self.parser = parser\n            self.proc_name = self.parent.proc_name\n\n        # Init _subparsers\n        self._subparsers = None\n\n        # Add arguments and subcommands\n        # meta__arguments_dict = {}\n        # meta__subcommands_dict = {}\n        self.add_arguments()\n        self.add_subcommands()\n\n    def __repr__(self):\n        return f\"&lt;{self.__class__.__module__}.{self.__class__.__name__}&gt;\"\n\n    def create_parser(self):\n        \"Create a new parser\"\n        usage = self.query_cfg_parents(\"help_usage\", default=None)\n        desc = self.query_cfg_parents(\"help_description\", default=self.__doc__)\n        epilog = self.query_cfg_parents(\"help_epilog\", default=None)\n\n        fenv = FormatEnv({\"self\": self})\n        usage = prepare_docstring(usage, variables=fenv.get())\n        desc = prepare_docstring(desc, variables=fenv.get())\n        epilog = prepare_docstring(epilog, variables=fenv.get())\n        parser = argparse.ArgumentParser(\n            prog=self.proc_name,\n            usage=usage,\n            description=desc,\n            epilog=epilog,\n            formatter_class=RecursiveHelpFormatter,\n            add_help=self.add_help,\n            exit_on_error=False,\n        )\n        return parser\n\n    def __getitem__(self, key):\n        return self.children[key]\n\n    def get_fname(self, attr=\"key\"):\n        \"Get full name of the parser, use key instead of name by default\"\n        return super().get_fname(attr=attr)\n\n    @property\n    def subparsers(self):\n        \"\"\"Lazily create and return the subparsers object.\"\"\"\n        # if not self.inject_as_subparser:\n        #     return self.parser\n\n        if self._subparsers is None:\n            level = len(self.get_hierarchy())\n            self._subparsers = self.parser.add_subparsers(\n                dest=f\"__cli_cmd__{level}\", help=\"Available commands\"\n            )\n        return self._subparsers\n\n    # Argument management\n    # ========================\n\n    def add_arguments(self, arguments: dict = None):\n        \"\"\"Initialize all argument options defined for this parser.\n\n        This method:\n        1. Collects arguments from arguments_dict\n        2. Collects arguments defined as class attributes\n        3. Adds internal arguments like __cli_self__\n        4. Creates all argument parser entries\n        \"\"\"\n        arguments = arguments or getattr(self, \"meta__arguments_dict\", {}) or {}\n        assert isinstance(arguments, dict), f\"Got {type(arguments)} instead of dict\"\n\n        # Add arguments from class attributes including inherited ones\n        for cls in self.__class__.__mro__:\n            for name, value in vars(cls).items():\n                if isinstance(value, Argument) and name not in arguments:\n                    value.destination = name\n                    arguments[name] = value\n\n        # Add __cli_self__ argument\n        arguments[\"__cli_self__\"] = Argument(help=argparse.SUPPRESS, default=self)\n\n        # Create all options\n        for key, arg in arguments.items():\n            self.add_argument(key, arg)\n            # arg.attach_arg_to_parser(key, self)\n\n    def add_argument(\n        self, key: str, arg: Optional[Argument] = None, **kwargs: Any\n    ) -&gt; None:\n        \"\"\"Add an argument to this parser.\n\n        Args:\n            key (str): The key/name for the argument\n            arg (Argument): The argument object to add\n            **kwargs (Any): Additional keyword arguments to pass to add_argument()\n\n        This method adds a new argument to the parser. The argument can be either a\n        positional argument or an optional flag, determined by the Argument object.\n        \"\"\"\n\n        if arg is None:\n            arg = Argument(**kwargs)\n\n        arg.attach_arg_to_parser(key, self)\n\n    # Subcommand management\n    # ========================\n\n    def add_subcommands(self, subcommands: dict = None):\n        \"\"\"Initialize all subcommands defined for this parser.\n\n        This method:\n        1. Collects subcommands from children dictionary\n        2. Collects Command instances defined as class attributes\n        3. Creates parser entries for all subcommands\n        \"\"\"\n\n        subcommands = subcommands or getattr(self, \"meta__subcommands_dict\", {}) or {}\n        assert isinstance(subcommands, dict), f\"Got {type(subcommands)} instead of dict\"\n\n        # Add arguments from class attributes that are Command instances\n        for cls in self.__class__.__mro__:\n            for attr_name, attr_value in cls.__dict__.items():\n                if isinstance(attr_value, Command):\n                    # Store the attribute name as the key in the Fn instance\n                    attr_value.destination = attr_name\n                    subcommands[attr_name] = attr_value\n\n        for key, arg in subcommands.items():\n            # arg.attach_sub_to_parser(key, self)\n            self.add_subcommand(key, arg)\n\n    def add_subcommand(self, key: str, arg=None, **kwargs) -&gt; None:\n        \"Add a subcommand to this parser\"\n        if arg is None:\n            arg = Command(**kwargs)\n\n        arg.attach_sub_to_parser(key, self)\n\n    # Help methods\n    # ========================\n\n    def show_help(self):\n        \"\"\"Display the help message for this parser.\"\"\"\n        self.parser.print_help()\n\n    def show_usage(self):\n        \"\"\"Display the usage message for this parser.\"\"\"\n        self.parser.print_usage()\n\n    def show_epilog(self):\n        \"\"\"Display the epilog message for this parser.\"\"\"\n        self.parser.print_epilog()\n\n    # Execution helpers\n    # ========================\n\n    def cli_exit(self, status=0, message=None):\n        \"\"\"Exit the CLI application with given status and message.\n\n        Args:\n            status (int): Exit status code\n            message (str): Optional message to display\n        \"\"\"\n        self.parser.exit(status=status, message=message)\n\n    def cli_exit_error(self, message):\n        \"\"\"Exit the CLI application with an error message.\n\n        Args:\n            message (str): Error message to display\n        \"\"\"\n        self.parser.error(message)\n\n    def cli_run(self, **kwargs: Any) -&gt; None:  # pylint: disable=unused-argument\n        \"\"\"Execute the command implementation.\n\n        This method should be overridden by subclasses to implement command behavior.\n        The base implementation shows help for non-leaf nodes.\n\n        Args:\n            **kwargs: Additional keyword arguments from command line\n\n        Raises:\n            ClakNotImplementedError: If leaf node has no implementation\n        \"\"\"\n\n        ctx = kwargs[\"ctx\"]\n\n        # Check if class is a leaf or not\n        if len(ctx.cli_children) &gt; 0:\n            self.show_help()\n        else:\n            raise exception.ClakNotImplementedError(\n                f\"No 'cli_run' method found for {self}\"\n            )\n\n    def cli_group(self, ctx: SimpleNamespace, **_: Any) -&gt; None:\n        \"\"\"Execute group-level command behavior.\n\n        Args:\n            ctx: Command context object\n            **_: Unused keyword arguments\n        \"\"\"\n\n    def find_closest_subcommand(self, args: Optional[List[str]] = None) -&gt; \"ParserNode\":\n        \"\"\"Find the deepest valid subcommand from given arguments.\n\n        Args:\n            args (list): Command line arguments, defaults to sys.argv[1:]\n\n        Returns:\n            ParserNode: The deepest valid subcommand parser\n        \"\"\"\n\n        # Get the current command line from sys.argv\n        current_cmd = sys.argv[1:] if args is None else args\n        last_child = self\n\n        # Loop through each argument to find the deepest valid subcommand\n        for arg in current_cmd:\n            # Skip options (starting with -)\n            if arg.startswith(\"-\"):\n                break\n\n            # Check if argument exists as a subcommand\n            if arg in last_child.children:\n                last_child = last_child.children[arg]\n            else:\n                break\n\n        return last_child\n\n    def clean_terminate(self, err, known_exceptions=None):\n        \"\"\"Handle program termination based on exception type.\n\n        Args:\n            err (Exception): The exception that triggered termination\n            known_exceptions (list): List of exception types to handle specially\n        \"\"\"\n\n        # def default_exception_handler(node, exc):\n        #     print(f\"Default exception handler: {exc} on {node}\")\n        #     sys.exit(1)\n\n        # # Prepare known exceptions list\n        # known_exceptions = known_exceptions or []\n        # known_exceptions_conf = {}\n        # for _exception in known_exceptions:\n        #     exception_fn = default_exception_handler\n        #     if isinstance(_exception, Sequence):\n        #         exception_cls = _exception[0]\n        #         if len(_exception) &gt; 1:\n        #             exception_fn = _exception[1]\n        #     else:\n        #         exception_cls = _exception\n\n        #     exception_name = str(exception_cls)\n        #     known_exceptions_conf[exception_name] = {\n        #         \"fn\": exception_fn,\n        #         \"exception\": exception_cls,\n        #     }\n        # known_exceptions_list = tuple(\n        #     val[\"exception\"] for val in known_exceptions_conf.values()\n        # )\n        # # Check user overrides\n        # if known_exceptions_list and isinstance(err, known_exceptions_list):\n        #     print(\"DEBUG\", type(err), str(type(err)), err)\n        #     pprint(known_exceptions_conf)\n        #     get_handler = known_exceptions_conf[str(type(err))][\"fn\"]\n        #     get_handler(self, err)\n        #     # If handler did not exited, ensure we do\n        #     sys.exit(1)\n\n        # Check user overrides\n        known_exceptions = tuple(known_exceptions)\n        if known_exceptions and isinstance(err, known_exceptions):\n            logger.fatal(err)\n            sys.exit(1)\n\n        # If user made an error on command line, show usage before leaving\n        if isinstance(err, exception.ClakParseError):\n            # Must go to stdout\n            self.show_usage()\n            print(f\"{err}\")\n            sys.exit(err.rc)\n\n        # Choose dead end way generic user error\n        if isinstance(err, exception.ClakUserError):\n            if isinstance(err.advice, str):\n                logger.warning(err.advice)\n\n            print(f\"{err}\")\n            sys.exit(err.rc)\n\n        # Internal clak errors\n        if isinstance(err, exception.ClakError):\n            err_name = err.__class__.__name__\n            if isinstance(err.advice, str):\n                logger.warning(err.advice)\n\n            err_message = err.message\n            if not err_message:\n                err_message = err.__doc__\n\n            print(f\"{err}\")\n            logger.critical(\n                \"Program exited with bug %s(%s): %s\",\n                err_name,\n                err.rc,\n                err_message,\n            )\n            sys.exit(err.rc)\n\n        oserrors = [\n            PermissionError,\n            FileExistsError,\n            FileNotFoundError,\n            InterruptedError,\n            IsADirectoryError,\n            NotADirectoryError,\n            TimeoutError,\n        ]\n\n        if err.__class__ in oserrors:\n\n            # Decode OS errors\n            # errno = os.strerror(err.errno)\n            # errint = str(err.errno)\n\n            logger.critical(\"Program exited with OS error: %s\", err)\n            sys.exit(err.errno)\n\n    def parse_args(\n        self, args: Optional[Union[str, List[str], Dict[str, Any]]] = None\n    ) -&gt; argparse.Namespace:\n        \"\"\"Parse command line arguments.\n\n        Args:\n            args: Arguments to parse, can be:\n                - None: Use sys.argv[1:]\n                - str: Split on spaces\n                - list: Use directly\n                - dict: Return as-is\n\n        Returns:\n            Namespace: Parsed argument namespace\n\n        Raises:\n            ValueError: If args is invalid type\n        \"\"\"\n        parser = self.parser\n        # argcomplete.autocomplete(parser)\n\n        # args = args[0] if len(args) &gt; 0 else sys.argv[1:]\n\n        if args is None:\n            args = sys.argv[1:]\n        elif isinstance(args, str):\n            args = args.split(\" \")\n        elif isinstance(args, list):\n            pass\n        elif isinstance(args, dict):\n            return args\n        else:\n            raise ValueError(f\"Invalid args type: {type(args)}\")\n\n        return parser.parse_args(args)\n\n    def dispatch(\n        self,\n        args: Optional[Dict[str, Any]] = None,\n        trace: Optional[bool] = False,\n        **_: Any,\n    ) -&gt; Any:\n        \"\"\"Main dispatch function for command execution.\n\n        Args:\n            args: Arguments to parse\n            **_: Unused keyword arguments\n        \"\"\"\n\n        # Process or reuse args\n        # if args is None:\n        error = None\n        try:\n            args = self.parse_args(args)\n            args = args.__dict__\n        except argparse.ArgumentError as err:\n            msg = f\"Could not parse command line: {err.argument_name} {err.message}\"\n            error = exception.ClakParseError(msg)\n            # raise exception.ClakParseError(msg) from err\n\n        if not error:\n            assert isinstance(args, dict)\n\n            # Check for trace mode\n            if \"app_trace_mode\" in args:\n                trace = args[\"app_trace_mode\"]\n            if CLAK_DEBUG:\n                trace = True\n\n            # Run app command\n            try:\n                # Process commands\n                data = self.cli_execute(args=args)\n\n            except Exception as err:  # pylint: disable=broad-exception-caught\n                error = err\n\n        if not error:\n            # Prepare viewer output\n            viewer = None\n            if isinstance(data, ClakView):\n                viewer = data\n            else:\n                viewer = self.query_cfg_parents(\"cli_view\", default=None)\n                if viewer:\n                    viewer.payload = data\n\n            # Render output or return data\n            if viewer:\n                viewer.render()\n            return data\n\n        if trace is True:\n            # print(\"TRACE\")\n            # Show traceback if debug mode is enabled\n            logger.error(\"\".join(traceback.format_exception(error)))\n            # print(\"TRACE\")\n\n        # Process exception handling\n        known_exceptions = self.query_cfg_parents(\"known_exceptions\", default=[])\n        self.clean_terminate(error, known_exceptions)\n\n        # Developer catchall, when an exception is not handled\n        if trace is False:\n            # print(\"TRACE\")\n            # Show traceback if not already shown\n            logger.error(\"\".join(traceback.format_exception(error)))\n        logger.critical(\n            \"Uncaught error %s, this may be a bug! Error: %s\", error.__class__, error\n        )\n        # logger.critical(\"Exit 1 with bugs\")\n        sys.exit(1)\n\n    def cli_execute(  # pylint: disable=too-many-locals,too-many-statements\n        self, args: Optional[Dict[str, Any]] = None\n    ) -&gt; Any:\n        \"\"\"Execute the command with given arguments.\n\n        Args:\n            args: Arguments to parse\n\n        Raises:\n            ClakParseError: If argument parsing fails\n            NotImplementedError: If command has no implementation\n        \"\"\"\n        assert isinstance(args, dict)\n\n        # Prepare args and context\n        hook_list = {}\n\n        # args = args.__dict__\n        cli_command_hier = [\n            value\n            for key, value in sorted(args.items())\n            if key.startswith(\"__cli_cmd__\")\n        ]\n        args = {\n            key: value\n            for key, value in args.items()\n            if not key.startswith(\"__cli_cmd__\")\n        }\n\n        cli_self = self\n        if \"__cli_self__\" in args:\n            cli_self = args.pop(\"__cli_self__\")\n\n        # Prepare data\n        fn_group_name = \"cli_group\"\n        fn_exec_name = \"cli_run\"\n        fn_hook_prefix = \"cli_hook__\"\n        name = self.name\n        hierarchy = cli_self.get_hierarchy()\n        node_count = len(hierarchy)\n\n        logger.debug(\"Run instance %s\", cli_self)\n\n        ctx = {}\n        ctx[\"registry\"] = self.registry\n\n        # Fetch settings\n        ctx[\"name\"] = name\n        ctx[\"app_name\"] = self.query_cfg_parents(\"app_name\", default=name)\n        ctx[\"app_proc_name\"] = self.query_cfg_parents(\n            \"app_proc_name\", default=self.proc_name\n        )\n        # ctx[\"app_env_prefix\"] = self.query_cfg_parents(\n        #     \"app_env_prefix\", default=name.upper()\n        # )\n\n        # Loop constant\n        ctx[\"cli_self\"] = cli_self\n        ctx[\"cli_root\"] = self\n        ctx[\"cli_depth\"] = node_count\n        ctx[\"cli_commands\"] = cli_command_hier\n        ctx[\"args\"] = ObjectNamespace(**args)\n\n        # Shared data\n        ctx[\"data\"] = {}\n        ctx[\"plugins\"] = {}\n\n        # Loop var init\n        ctx[\"cli_first\"] = True\n        ctx[\"cli_state\"] = None\n        ctx[\"cli_methods\"] = None\n\n        # Execute all nodes in hierarchy\n        ret = None\n        # pylint: disable=attribute-defined-outside-init\n        for idx, node in enumerate(hierarchy):\n            last_node = idx == (node_count - 1)\n\n            logger.info(\"Processing node %d:%s.%s\", idx, node, fn_group_name)\n            # print(f\"Node {idx}:{node}\")\n\n            # Prepare hooks list\n            cls_hooks = [\n                method for method in dir(self) if method.startswith(fn_hook_prefix)\n            ]\n            for hook_name in cls_hooks:\n                if not hook_name in hook_list:\n                    hook_fn = getattr(self, hook_name, None)\n                    if hook_fn is not None:\n                        # Hooks order should be preserved with dict\n                        hook_list[hook_name] = hook_fn\n\n            # Update ctx with node attributes\n            ctx[\"cli_parent\"] = hierarchy[-2] if len(hierarchy) &gt; 1 else None\n            ctx[\"cli_parents\"] = hierarchy[:idx]\n            ctx[\"cli_children\"] = dict(node.children)\n            ctx[\"cli_last\"] = last_node\n            ctx[\"cli_hooks\"] = hook_list\n            ctx[\"cli_index\"] = idx\n\n            # Sort ctx dict by keys before creating namespace\n            sorted_ctx = dict(sorted(ctx.items()))\n            _ctx = ObjectNamespace(**sorted_ctx)\n            _ctx.cli_state = \"run_hooks\"\n\n            # Process hooks\n            for name, hook_fn in hook_list.items():\n                # hook_fn = getattr(self, hook, None)\n                # if hook_fn is not None:\n                logger.info(\"Run hook %d:%s.%s\", idx, node, name)\n                hook_fn(node, _ctx)\n\n            # Store the list of available plugins methods\n            _ctx.cli_methods = getattr(node, \"cli_methods\", {})\n\n            # Run group_run\n            _ctx.cli_state = \"run_groups\"\n\n            group_fn = getattr(node, fn_group_name, None)\n            # print (\"GROUP FN\", group_fn)\n            if group_fn is not None:\n                logger.info(\n                    \"Group function execute: %d:%s.%s\", idx, node, fn_group_name\n                )\n                group_fn(ctx=_ctx, **_ctx.__dict__)\n\n            # Run leaf only if last node\n            _ctx.cli_state = \"run_exec\"\n            if last_node is True:\n                run_fn = getattr(node, fn_exec_name, None)\n\n                logger.info(\"Run function execute: %d:%s.%s\", idx, node, fn_exec_name)\n                ret = run_fn(ctx=_ctx, **_ctx.args.__dict__)\n\n            # Change status\n            ctx[\"cli_first\"] = False\n\n        return ret\n</code></pre>"},{"location":"api/parser/#clak.parser.ParserNode.subparsers","title":"<code>subparsers</code>  <code>property</code>","text":"<p>Lazily create and return the subparsers object.</p>"},{"location":"api/parser/#clak.parser.ParserNode.__init__","title":"<code>__init__(add_help=True, parent=None, name=None, key=None, parser=None, inject_as_subparser=True, proc_name=None)</code>","text":"<p>Initialize the parser.</p> <p>Parameters:</p> Name Type Description Default <code>add_help</code> <code>bool</code> <p>Whether to add help flags</p> <code>True</code> <code>parent</code> <code>ParserNode</code> <p>Parent parser instance</p> <code>None</code> <code>name</code> <code>str</code> <p>ParserNode name</p> <code>None</code> <code>key</code> <code>str</code> <p>ParserNode key</p> <code>None</code> <code>parser</code> <code>ArgumentParser</code> <p>Existing parser to use</p> <code>None</code> <code>inject_as_subparser</code> <code>bool</code> <p>Whether to inject as subparser</p> <code>True</code> <code>proc_name</code> <code>str</code> <p>Process name</p> <code>None</code> Source code in <code>clak/parser.py</code> <pre><code>def __init__(  # pylint: disable=too-many-arguments,too-many-positional-arguments\n    self,\n    add_help: bool = True,\n    parent: \"ParserNode\" = None,\n    name: str = None,\n    key: str = None,\n    parser: argparse.ArgumentParser = None,\n    inject_as_subparser: bool = True,\n    proc_name: str = None,\n):\n    \"\"\"Initialize the parser.\n\n    Args:\n        add_help (bool): Whether to add help flags\n        parent (ParserNode): Parent parser instance\n        name (str): ParserNode name\n        key (str): ParserNode key\n        parser (ArgumentParser): Existing parser to use\n        inject_as_subparser (bool): Whether to inject as subparser\n        proc_name (str): Process name\n    \"\"\"\n\n    self.logger = logger\n\n    super().__init__(parent=parent)\n\n    self.name = self.query_cfg_parents(\"name\", default=self.__class__.__name__)\n    self.key = key\n    self.fkey = self.get_fname(attr=\"key\")\n    self.inject_as_subparser = inject_as_subparser\n    self.proc_name = proc_name\n    self.add_help = add_help\n\n    # Add children link\n    self.children = {}\n    self.registry = {}\n    if parent:\n        parent.children[self.key] = self\n        self.registry = parent.registry\n    self.registry[self.fkey] = self  # RegistryEntry(config=self)\n\n    # Create or reuse parent parser\n    if parser is None:\n        self.parser = self.create_parser()\n        self.proc_name = self.parser.prog\n    else:\n        self.parser = parser\n        self.proc_name = self.parent.proc_name\n\n    # Init _subparsers\n    self._subparsers = None\n\n    # Add arguments and subcommands\n    # meta__arguments_dict = {}\n    # meta__subcommands_dict = {}\n    self.add_arguments()\n    self.add_subcommands()\n</code></pre>"},{"location":"api/parser/#clak.parser.ParserNode.add_argument","title":"<code>add_argument(key, arg=None, **kwargs)</code>","text":"<p>Add an argument to this parser.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key/name for the argument</p> required <code>arg</code> <code>Argument</code> <p>The argument object to add</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to add_argument()</p> <code>{}</code> <p>This method adds a new argument to the parser. The argument can be either a positional argument or an optional flag, determined by the Argument object.</p> Source code in <code>clak/parser.py</code> <pre><code>def add_argument(\n    self, key: str, arg: Optional[Argument] = None, **kwargs: Any\n) -&gt; None:\n    \"\"\"Add an argument to this parser.\n\n    Args:\n        key (str): The key/name for the argument\n        arg (Argument): The argument object to add\n        **kwargs (Any): Additional keyword arguments to pass to add_argument()\n\n    This method adds a new argument to the parser. The argument can be either a\n    positional argument or an optional flag, determined by the Argument object.\n    \"\"\"\n\n    if arg is None:\n        arg = Argument(**kwargs)\n\n    arg.attach_arg_to_parser(key, self)\n</code></pre>"},{"location":"api/parser/#clak.parser.ParserNode.add_arguments","title":"<code>add_arguments(arguments=None)</code>","text":"<p>Initialize all argument options defined for this parser.</p> <p>This method: 1. Collects arguments from arguments_dict 2. Collects arguments defined as class attributes 3. Adds internal arguments like cli_self 4. Creates all argument parser entries</p> Source code in <code>clak/parser.py</code> <pre><code>def add_arguments(self, arguments: dict = None):\n    \"\"\"Initialize all argument options defined for this parser.\n\n    This method:\n    1. Collects arguments from arguments_dict\n    2. Collects arguments defined as class attributes\n    3. Adds internal arguments like __cli_self__\n    4. Creates all argument parser entries\n    \"\"\"\n    arguments = arguments or getattr(self, \"meta__arguments_dict\", {}) or {}\n    assert isinstance(arguments, dict), f\"Got {type(arguments)} instead of dict\"\n\n    # Add arguments from class attributes including inherited ones\n    for cls in self.__class__.__mro__:\n        for name, value in vars(cls).items():\n            if isinstance(value, Argument) and name not in arguments:\n                value.destination = name\n                arguments[name] = value\n\n    # Add __cli_self__ argument\n    arguments[\"__cli_self__\"] = Argument(help=argparse.SUPPRESS, default=self)\n\n    # Create all options\n    for key, arg in arguments.items():\n        self.add_argument(key, arg)\n</code></pre>"},{"location":"api/parser/#clak.parser.ParserNode.add_subcommand","title":"<code>add_subcommand(key, arg=None, **kwargs)</code>","text":"<p>Add a subcommand to this parser</p> Source code in <code>clak/parser.py</code> <pre><code>def add_subcommand(self, key: str, arg=None, **kwargs) -&gt; None:\n    \"Add a subcommand to this parser\"\n    if arg is None:\n        arg = Command(**kwargs)\n\n    arg.attach_sub_to_parser(key, self)\n</code></pre>"},{"location":"api/parser/#clak.parser.ParserNode.add_subcommands","title":"<code>add_subcommands(subcommands=None)</code>","text":"<p>Initialize all subcommands defined for this parser.</p> <p>This method: 1. Collects subcommands from children dictionary 2. Collects Command instances defined as class attributes 3. Creates parser entries for all subcommands</p> Source code in <code>clak/parser.py</code> <pre><code>def add_subcommands(self, subcommands: dict = None):\n    \"\"\"Initialize all subcommands defined for this parser.\n\n    This method:\n    1. Collects subcommands from children dictionary\n    2. Collects Command instances defined as class attributes\n    3. Creates parser entries for all subcommands\n    \"\"\"\n\n    subcommands = subcommands or getattr(self, \"meta__subcommands_dict\", {}) or {}\n    assert isinstance(subcommands, dict), f\"Got {type(subcommands)} instead of dict\"\n\n    # Add arguments from class attributes that are Command instances\n    for cls in self.__class__.__mro__:\n        for attr_name, attr_value in cls.__dict__.items():\n            if isinstance(attr_value, Command):\n                # Store the attribute name as the key in the Fn instance\n                attr_value.destination = attr_name\n                subcommands[attr_name] = attr_value\n\n    for key, arg in subcommands.items():\n        # arg.attach_sub_to_parser(key, self)\n        self.add_subcommand(key, arg)\n</code></pre>"},{"location":"api/parser/#clak.parser.ParserNode.clean_terminate","title":"<code>clean_terminate(err, known_exceptions=None)</code>","text":"<p>Handle program termination based on exception type.</p> <p>Parameters:</p> Name Type Description Default <code>err</code> <code>Exception</code> <p>The exception that triggered termination</p> required <code>known_exceptions</code> <code>list</code> <p>List of exception types to handle specially</p> <code>None</code> Source code in <code>clak/parser.py</code> <pre><code>def clean_terminate(self, err, known_exceptions=None):\n    \"\"\"Handle program termination based on exception type.\n\n    Args:\n        err (Exception): The exception that triggered termination\n        known_exceptions (list): List of exception types to handle specially\n    \"\"\"\n\n    # def default_exception_handler(node, exc):\n    #     print(f\"Default exception handler: {exc} on {node}\")\n    #     sys.exit(1)\n\n    # # Prepare known exceptions list\n    # known_exceptions = known_exceptions or []\n    # known_exceptions_conf = {}\n    # for _exception in known_exceptions:\n    #     exception_fn = default_exception_handler\n    #     if isinstance(_exception, Sequence):\n    #         exception_cls = _exception[0]\n    #         if len(_exception) &gt; 1:\n    #             exception_fn = _exception[1]\n    #     else:\n    #         exception_cls = _exception\n\n    #     exception_name = str(exception_cls)\n    #     known_exceptions_conf[exception_name] = {\n    #         \"fn\": exception_fn,\n    #         \"exception\": exception_cls,\n    #     }\n    # known_exceptions_list = tuple(\n    #     val[\"exception\"] for val in known_exceptions_conf.values()\n    # )\n    # # Check user overrides\n    # if known_exceptions_list and isinstance(err, known_exceptions_list):\n    #     print(\"DEBUG\", type(err), str(type(err)), err)\n    #     pprint(known_exceptions_conf)\n    #     get_handler = known_exceptions_conf[str(type(err))][\"fn\"]\n    #     get_handler(self, err)\n    #     # If handler did not exited, ensure we do\n    #     sys.exit(1)\n\n    # Check user overrides\n    known_exceptions = tuple(known_exceptions)\n    if known_exceptions and isinstance(err, known_exceptions):\n        logger.fatal(err)\n        sys.exit(1)\n\n    # If user made an error on command line, show usage before leaving\n    if isinstance(err, exception.ClakParseError):\n        # Must go to stdout\n        self.show_usage()\n        print(f\"{err}\")\n        sys.exit(err.rc)\n\n    # Choose dead end way generic user error\n    if isinstance(err, exception.ClakUserError):\n        if isinstance(err.advice, str):\n            logger.warning(err.advice)\n\n        print(f\"{err}\")\n        sys.exit(err.rc)\n\n    # Internal clak errors\n    if isinstance(err, exception.ClakError):\n        err_name = err.__class__.__name__\n        if isinstance(err.advice, str):\n            logger.warning(err.advice)\n\n        err_message = err.message\n        if not err_message:\n            err_message = err.__doc__\n\n        print(f\"{err}\")\n        logger.critical(\n            \"Program exited with bug %s(%s): %s\",\n            err_name,\n            err.rc,\n            err_message,\n        )\n        sys.exit(err.rc)\n\n    oserrors = [\n        PermissionError,\n        FileExistsError,\n        FileNotFoundError,\n        InterruptedError,\n        IsADirectoryError,\n        NotADirectoryError,\n        TimeoutError,\n    ]\n\n    if err.__class__ in oserrors:\n\n        # Decode OS errors\n        # errno = os.strerror(err.errno)\n        # errint = str(err.errno)\n\n        logger.critical(\"Program exited with OS error: %s\", err)\n        sys.exit(err.errno)\n</code></pre>"},{"location":"api/parser/#clak.parser.ParserNode.cli_execute","title":"<code>cli_execute(args=None)</code>","text":"<p>Execute the command with given arguments.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>Optional[Dict[str, Any]]</code> <p>Arguments to parse</p> <code>None</code> <p>Raises:</p> Type Description <code>ClakParseError</code> <p>If argument parsing fails</p> <code>NotImplementedError</code> <p>If command has no implementation</p> Source code in <code>clak/parser.py</code> <pre><code>def cli_execute(  # pylint: disable=too-many-locals,too-many-statements\n    self, args: Optional[Dict[str, Any]] = None\n) -&gt; Any:\n    \"\"\"Execute the command with given arguments.\n\n    Args:\n        args: Arguments to parse\n\n    Raises:\n        ClakParseError: If argument parsing fails\n        NotImplementedError: If command has no implementation\n    \"\"\"\n    assert isinstance(args, dict)\n\n    # Prepare args and context\n    hook_list = {}\n\n    # args = args.__dict__\n    cli_command_hier = [\n        value\n        for key, value in sorted(args.items())\n        if key.startswith(\"__cli_cmd__\")\n    ]\n    args = {\n        key: value\n        for key, value in args.items()\n        if not key.startswith(\"__cli_cmd__\")\n    }\n\n    cli_self = self\n    if \"__cli_self__\" in args:\n        cli_self = args.pop(\"__cli_self__\")\n\n    # Prepare data\n    fn_group_name = \"cli_group\"\n    fn_exec_name = \"cli_run\"\n    fn_hook_prefix = \"cli_hook__\"\n    name = self.name\n    hierarchy = cli_self.get_hierarchy()\n    node_count = len(hierarchy)\n\n    logger.debug(\"Run instance %s\", cli_self)\n\n    ctx = {}\n    ctx[\"registry\"] = self.registry\n\n    # Fetch settings\n    ctx[\"name\"] = name\n    ctx[\"app_name\"] = self.query_cfg_parents(\"app_name\", default=name)\n    ctx[\"app_proc_name\"] = self.query_cfg_parents(\n        \"app_proc_name\", default=self.proc_name\n    )\n    # ctx[\"app_env_prefix\"] = self.query_cfg_parents(\n    #     \"app_env_prefix\", default=name.upper()\n    # )\n\n    # Loop constant\n    ctx[\"cli_self\"] = cli_self\n    ctx[\"cli_root\"] = self\n    ctx[\"cli_depth\"] = node_count\n    ctx[\"cli_commands\"] = cli_command_hier\n    ctx[\"args\"] = ObjectNamespace(**args)\n\n    # Shared data\n    ctx[\"data\"] = {}\n    ctx[\"plugins\"] = {}\n\n    # Loop var init\n    ctx[\"cli_first\"] = True\n    ctx[\"cli_state\"] = None\n    ctx[\"cli_methods\"] = None\n\n    # Execute all nodes in hierarchy\n    ret = None\n    # pylint: disable=attribute-defined-outside-init\n    for idx, node in enumerate(hierarchy):\n        last_node = idx == (node_count - 1)\n\n        logger.info(\"Processing node %d:%s.%s\", idx, node, fn_group_name)\n        # print(f\"Node {idx}:{node}\")\n\n        # Prepare hooks list\n        cls_hooks = [\n            method for method in dir(self) if method.startswith(fn_hook_prefix)\n        ]\n        for hook_name in cls_hooks:\n            if not hook_name in hook_list:\n                hook_fn = getattr(self, hook_name, None)\n                if hook_fn is not None:\n                    # Hooks order should be preserved with dict\n                    hook_list[hook_name] = hook_fn\n\n        # Update ctx with node attributes\n        ctx[\"cli_parent\"] = hierarchy[-2] if len(hierarchy) &gt; 1 else None\n        ctx[\"cli_parents\"] = hierarchy[:idx]\n        ctx[\"cli_children\"] = dict(node.children)\n        ctx[\"cli_last\"] = last_node\n        ctx[\"cli_hooks\"] = hook_list\n        ctx[\"cli_index\"] = idx\n\n        # Sort ctx dict by keys before creating namespace\n        sorted_ctx = dict(sorted(ctx.items()))\n        _ctx = ObjectNamespace(**sorted_ctx)\n        _ctx.cli_state = \"run_hooks\"\n\n        # Process hooks\n        for name, hook_fn in hook_list.items():\n            # hook_fn = getattr(self, hook, None)\n            # if hook_fn is not None:\n            logger.info(\"Run hook %d:%s.%s\", idx, node, name)\n            hook_fn(node, _ctx)\n\n        # Store the list of available plugins methods\n        _ctx.cli_methods = getattr(node, \"cli_methods\", {})\n\n        # Run group_run\n        _ctx.cli_state = \"run_groups\"\n\n        group_fn = getattr(node, fn_group_name, None)\n        # print (\"GROUP FN\", group_fn)\n        if group_fn is not None:\n            logger.info(\n                \"Group function execute: %d:%s.%s\", idx, node, fn_group_name\n            )\n            group_fn(ctx=_ctx, **_ctx.__dict__)\n\n        # Run leaf only if last node\n        _ctx.cli_state = \"run_exec\"\n        if last_node is True:\n            run_fn = getattr(node, fn_exec_name, None)\n\n            logger.info(\"Run function execute: %d:%s.%s\", idx, node, fn_exec_name)\n            ret = run_fn(ctx=_ctx, **_ctx.args.__dict__)\n\n        # Change status\n        ctx[\"cli_first\"] = False\n\n    return ret\n</code></pre>"},{"location":"api/parser/#clak.parser.ParserNode.cli_exit","title":"<code>cli_exit(status=0, message=None)</code>","text":"<p>Exit the CLI application with given status and message.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>int</code> <p>Exit status code</p> <code>0</code> <code>message</code> <code>str</code> <p>Optional message to display</p> <code>None</code> Source code in <code>clak/parser.py</code> <pre><code>def cli_exit(self, status=0, message=None):\n    \"\"\"Exit the CLI application with given status and message.\n\n    Args:\n        status (int): Exit status code\n        message (str): Optional message to display\n    \"\"\"\n    self.parser.exit(status=status, message=message)\n</code></pre>"},{"location":"api/parser/#clak.parser.ParserNode.cli_exit_error","title":"<code>cli_exit_error(message)</code>","text":"<p>Exit the CLI application with an error message.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Error message to display</p> required Source code in <code>clak/parser.py</code> <pre><code>def cli_exit_error(self, message):\n    \"\"\"Exit the CLI application with an error message.\n\n    Args:\n        message (str): Error message to display\n    \"\"\"\n    self.parser.error(message)\n</code></pre>"},{"location":"api/parser/#clak.parser.ParserNode.cli_group","title":"<code>cli_group(ctx, **_)</code>","text":"<p>Execute group-level command behavior.</p> <p>Parameters:</p> Name Type Description Default <code>ctx</code> <code>SimpleNamespace</code> <p>Command context object</p> required <code>**_</code> <code>Any</code> <p>Unused keyword arguments</p> <code>{}</code> Source code in <code>clak/parser.py</code> <pre><code>def cli_group(self, ctx: SimpleNamespace, **_: Any) -&gt; None:\n    \"\"\"Execute group-level command behavior.\n\n    Args:\n        ctx: Command context object\n        **_: Unused keyword arguments\n    \"\"\"\n</code></pre>"},{"location":"api/parser/#clak.parser.ParserNode.cli_run","title":"<code>cli_run(**kwargs)</code>","text":"<p>Execute the command implementation.</p> <p>This method should be overridden by subclasses to implement command behavior. The base implementation shows help for non-leaf nodes.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments from command line</p> <code>{}</code> <p>Raises:</p> Type Description <code>ClakNotImplementedError</code> <p>If leaf node has no implementation</p> Source code in <code>clak/parser.py</code> <pre><code>def cli_run(self, **kwargs: Any) -&gt; None:  # pylint: disable=unused-argument\n    \"\"\"Execute the command implementation.\n\n    This method should be overridden by subclasses to implement command behavior.\n    The base implementation shows help for non-leaf nodes.\n\n    Args:\n        **kwargs: Additional keyword arguments from command line\n\n    Raises:\n        ClakNotImplementedError: If leaf node has no implementation\n    \"\"\"\n\n    ctx = kwargs[\"ctx\"]\n\n    # Check if class is a leaf or not\n    if len(ctx.cli_children) &gt; 0:\n        self.show_help()\n    else:\n        raise exception.ClakNotImplementedError(\n            f\"No 'cli_run' method found for {self}\"\n        )\n</code></pre>"},{"location":"api/parser/#clak.parser.ParserNode.create_parser","title":"<code>create_parser()</code>","text":"<p>Create a new parser</p> Source code in <code>clak/parser.py</code> <pre><code>def create_parser(self):\n    \"Create a new parser\"\n    usage = self.query_cfg_parents(\"help_usage\", default=None)\n    desc = self.query_cfg_parents(\"help_description\", default=self.__doc__)\n    epilog = self.query_cfg_parents(\"help_epilog\", default=None)\n\n    fenv = FormatEnv({\"self\": self})\n    usage = prepare_docstring(usage, variables=fenv.get())\n    desc = prepare_docstring(desc, variables=fenv.get())\n    epilog = prepare_docstring(epilog, variables=fenv.get())\n    parser = argparse.ArgumentParser(\n        prog=self.proc_name,\n        usage=usage,\n        description=desc,\n        epilog=epilog,\n        formatter_class=RecursiveHelpFormatter,\n        add_help=self.add_help,\n        exit_on_error=False,\n    )\n    return parser\n</code></pre>"},{"location":"api/parser/#clak.parser.ParserNode.dispatch","title":"<code>dispatch(args=None, trace=False, **_)</code>","text":"<p>Main dispatch function for command execution.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>Optional[Dict[str, Any]]</code> <p>Arguments to parse</p> <code>None</code> <code>**_</code> <code>Any</code> <p>Unused keyword arguments</p> <code>{}</code> Source code in <code>clak/parser.py</code> <pre><code>def dispatch(\n    self,\n    args: Optional[Dict[str, Any]] = None,\n    trace: Optional[bool] = False,\n    **_: Any,\n) -&gt; Any:\n    \"\"\"Main dispatch function for command execution.\n\n    Args:\n        args: Arguments to parse\n        **_: Unused keyword arguments\n    \"\"\"\n\n    # Process or reuse args\n    # if args is None:\n    error = None\n    try:\n        args = self.parse_args(args)\n        args = args.__dict__\n    except argparse.ArgumentError as err:\n        msg = f\"Could not parse command line: {err.argument_name} {err.message}\"\n        error = exception.ClakParseError(msg)\n        # raise exception.ClakParseError(msg) from err\n\n    if not error:\n        assert isinstance(args, dict)\n\n        # Check for trace mode\n        if \"app_trace_mode\" in args:\n            trace = args[\"app_trace_mode\"]\n        if CLAK_DEBUG:\n            trace = True\n\n        # Run app command\n        try:\n            # Process commands\n            data = self.cli_execute(args=args)\n\n        except Exception as err:  # pylint: disable=broad-exception-caught\n            error = err\n\n    if not error:\n        # Prepare viewer output\n        viewer = None\n        if isinstance(data, ClakView):\n            viewer = data\n        else:\n            viewer = self.query_cfg_parents(\"cli_view\", default=None)\n            if viewer:\n                viewer.payload = data\n\n        # Render output or return data\n        if viewer:\n            viewer.render()\n        return data\n\n    if trace is True:\n        # print(\"TRACE\")\n        # Show traceback if debug mode is enabled\n        logger.error(\"\".join(traceback.format_exception(error)))\n        # print(\"TRACE\")\n\n    # Process exception handling\n    known_exceptions = self.query_cfg_parents(\"known_exceptions\", default=[])\n    self.clean_terminate(error, known_exceptions)\n\n    # Developer catchall, when an exception is not handled\n    if trace is False:\n        # print(\"TRACE\")\n        # Show traceback if not already shown\n        logger.error(\"\".join(traceback.format_exception(error)))\n    logger.critical(\n        \"Uncaught error %s, this may be a bug! Error: %s\", error.__class__, error\n    )\n    # logger.critical(\"Exit 1 with bugs\")\n    sys.exit(1)\n</code></pre>"},{"location":"api/parser/#clak.parser.ParserNode.find_closest_subcommand","title":"<code>find_closest_subcommand(args=None)</code>","text":"<p>Find the deepest valid subcommand from given arguments.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>list</code> <p>Command line arguments, defaults to sys.argv[1:]</p> <code>None</code> <p>Returns:</p> Name Type Description <code>ParserNode</code> <code>ParserNode</code> <p>The deepest valid subcommand parser</p> Source code in <code>clak/parser.py</code> <pre><code>def find_closest_subcommand(self, args: Optional[List[str]] = None) -&gt; \"ParserNode\":\n    \"\"\"Find the deepest valid subcommand from given arguments.\n\n    Args:\n        args (list): Command line arguments, defaults to sys.argv[1:]\n\n    Returns:\n        ParserNode: The deepest valid subcommand parser\n    \"\"\"\n\n    # Get the current command line from sys.argv\n    current_cmd = sys.argv[1:] if args is None else args\n    last_child = self\n\n    # Loop through each argument to find the deepest valid subcommand\n    for arg in current_cmd:\n        # Skip options (starting with -)\n        if arg.startswith(\"-\"):\n            break\n\n        # Check if argument exists as a subcommand\n        if arg in last_child.children:\n            last_child = last_child.children[arg]\n        else:\n            break\n\n    return last_child\n</code></pre>"},{"location":"api/parser/#clak.parser.ParserNode.get_fname","title":"<code>get_fname(attr='key')</code>","text":"<p>Get full name of the parser, use key instead of name by default</p> Source code in <code>clak/parser.py</code> <pre><code>def get_fname(self, attr=\"key\"):\n    \"Get full name of the parser, use key instead of name by default\"\n    return super().get_fname(attr=attr)\n</code></pre>"},{"location":"api/parser/#clak.parser.ParserNode.parse_args","title":"<code>parse_args(args=None)</code>","text":"<p>Parse command line arguments.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>Optional[Union[str, List[str], Dict[str, Any]]]</code> <p>Arguments to parse, can be: - None: Use sys.argv[1:] - str: Split on spaces - list: Use directly - dict: Return as-is</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Namespace</code> <code>Namespace</code> <p>Parsed argument namespace</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If args is invalid type</p> Source code in <code>clak/parser.py</code> <pre><code>def parse_args(\n    self, args: Optional[Union[str, List[str], Dict[str, Any]]] = None\n) -&gt; argparse.Namespace:\n    \"\"\"Parse command line arguments.\n\n    Args:\n        args: Arguments to parse, can be:\n            - None: Use sys.argv[1:]\n            - str: Split on spaces\n            - list: Use directly\n            - dict: Return as-is\n\n    Returns:\n        Namespace: Parsed argument namespace\n\n    Raises:\n        ValueError: If args is invalid type\n    \"\"\"\n    parser = self.parser\n    # argcomplete.autocomplete(parser)\n\n    # args = args[0] if len(args) &gt; 0 else sys.argv[1:]\n\n    if args is None:\n        args = sys.argv[1:]\n    elif isinstance(args, str):\n        args = args.split(\" \")\n    elif isinstance(args, list):\n        pass\n    elif isinstance(args, dict):\n        return args\n    else:\n        raise ValueError(f\"Invalid args type: {type(args)}\")\n\n    return parser.parse_args(args)\n</code></pre>"},{"location":"api/parser/#clak.parser.ParserNode.show_epilog","title":"<code>show_epilog()</code>","text":"<p>Display the epilog message for this parser.</p> Source code in <code>clak/parser.py</code> <pre><code>def show_epilog(self):\n    \"\"\"Display the epilog message for this parser.\"\"\"\n    self.parser.print_epilog()\n</code></pre>"},{"location":"api/parser/#clak.parser.ParserNode.show_help","title":"<code>show_help()</code>","text":"<p>Display the help message for this parser.</p> Source code in <code>clak/parser.py</code> <pre><code>def show_help(self):\n    \"\"\"Display the help message for this parser.\"\"\"\n    self.parser.print_help()\n</code></pre>"},{"location":"api/parser/#clak.parser.ParserNode.show_usage","title":"<code>show_usage()</code>","text":"<p>Display the usage message for this parser.</p> Source code in <code>clak/parser.py</code> <pre><code>def show_usage(self):\n    \"\"\"Display the usage message for this parser.\"\"\"\n    self.parser.print_usage()\n</code></pre>"},{"location":"api/parser/#clak.parser.RegistryEntry","title":"<code>RegistryEntry</code>","text":"<p>Registry entry</p> Source code in <code>clak/parser.py</code> <pre><code>class RegistryEntry:\n    \"Registry entry\"\n\n    def __init__(self, config):\n        # super().__init__(*args, **kwargs)\n        # self.parser = None\n        self._config = config\n        self._entries = {}\n\n    def add_entry(self, key: str, value: Any) -&gt; None:\n        \"\"\"Add a new entry to the registry.\n\n        Args:\n            key: Key to store the entry under\n            value: Value to store in the registry\n        \"\"\"\n        self._entries[key] = value\n\n    def __repr__(self):\n        return f\"RegistryEntry({self._config})\"\n</code></pre>"},{"location":"api/parser/#clak.parser.RegistryEntry.add_entry","title":"<code>add_entry(key, value)</code>","text":"<p>Add a new entry to the registry.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Key to store the entry under</p> required <code>value</code> <code>Any</code> <p>Value to store in the registry</p> required Source code in <code>clak/parser.py</code> <pre><code>def add_entry(self, key: str, value: Any) -&gt; None:\n    \"\"\"Add a new entry to the registry.\n\n    Args:\n        key: Key to store the entry under\n        value: Value to store in the registry\n    \"\"\"\n    self._entries[key] = value\n</code></pre>"},{"location":"api/parser/#clak.parser.SubParser","title":"<code>SubParser</code>","text":"<p>               Bases: <code>ArgParseItem</code></p> <p>Represents a subcommand parser that can be added to a parent parser.</p> <p>This class handles creation of nested command structures, allowing for hierarchical command-line interfaces. It supports both subparser and injection modes.</p> <p>Attributes:</p> Name Type Description <code>meta__help_flags</code> <code>bool</code> <p>Whether to enable -h and --help support</p> <code>meta__usage</code> <code>str</code> <p>Custom usage message</p> <code>meta__description</code> <code>str</code> <p>Custom description message</p> <code>meta__epilog</code> <code>str</code> <p>Custom epilog message</p> Source code in <code>clak/parser.py</code> <pre><code>class SubParser(ArgParseItem):\n    \"\"\"Represents a subcommand parser that can be added to a parent parser.\n\n    This class handles creation of nested command structures, allowing for hierarchical\n    command-line interfaces. It supports both subparser and injection modes.\n\n    Attributes:\n        meta__help_flags (bool): Whether to enable -h and --help support\n        meta__usage (str): Custom usage message\n        meta__description (str): Custom description message\n        meta__epilog (str): Custom epilog message\n    \"\"\"\n\n    # If true, enable -h and --help support\n    meta__help_flags = True\n\n    meta__usage = None\n    meta__description = None\n    meta__epilog = None\n\n    def __init__(self, cls, *args, use_subparsers: bool = USE_SUBPARSERS, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.cls = cls\n        self.use_subparsers = use_subparsers\n\n    def attach_sub_to_parser(self, key: str, config: \"ParserNode\") -&gt; \"ParserNode\":\n        \"\"\"Create a subcommand parser for this command.\n\n        Creates a new subparser for the command and configures it with the appropriate\n        help text and options. Validates that the command name is valid.\n\n        Args:\n            key (str): Name of the subcommand\n            config (ParserNode): Parent parser configuration object\n\n        Raises:\n            ValueError: If command name contains spaces\n\n        Returns:\n            ParserNode: The created child parser instance\n        \"\"\"\n\n        if \" \" in key:\n            raise ValueError(\n                f\"Command name '{key}' contains spaces. Command names must not contain spaces.\"\n            )\n\n        if self.use_subparsers:\n\n            logger.debug(\n                \"Create new subparser %s.%s\",\n                config.get_fname(attr=\"key\"),\n                key,\n            )  # , self.kwargs)\n\n            # Fetch help from class\n            parser_help = self.kwargs.get(\n                \"help\",\n                self.cls.query_cfg_inst(\n                    self.cls, \"help_description\", default=self.cls.__doc__\n                ),\n            )\n            parser_help_enabled = self.kwargs.get(\n                \"help_flags\",\n                self.cls.query_cfg_inst(self.cls, \"help_flags\", default=True),\n            )\n\n            ctx_vars = {\"key\": key, \"self\": config}\n\n            # Create a new subparser for this command (flat structure)\n            parser_help = prepare_docstring(\n                first_doc_line(parser_help), variables=ctx_vars\n            )\n            parser_kwargs = {\n                \"formatter_class\": RecursiveHelpFormatter,\n                \"add_help\": parser_help_enabled,  # Add support for --help\n                \"exit_on_error\": False,\n                \"help\": parser_help,\n            }\n            # if parser_help is not None:\n            #     parser_kwargs[\"help\"] = parser_help\n\n            # Create parser\n            subparser = config.subparsers.add_parser(\n                key,\n                **parser_kwargs,\n            )\n\n            # Create an instance of the command class with the subparser\n            child = self.cls(parent=config, parser=subparser, key=key)\n            ctx_vars[\"self\"] = child\n\n            # logger.debug(\n            #     \"Create new SUBPARSER %s %s %s\",\n            #     child.get_fname(attr=\"key\"),\n            #     key,\n            #     self.kwargs,\n            # )\n\n            child_usage = child.query_cfg_inst(\"help_usage\", default=None)\n            child_desc = first_doc_line(\n                child.query_cfg_inst(\"help_description\", default=child.__doc__)\n            )\n            child_epilog = child.query_cfg_inst(\"help_epilog\", default=None)\n            # print(f\"DESC: |{desc}|\")\n\n            # Reconfigure subparser\n            child_usage = prepare_docstring(child_usage, variables=ctx_vars)\n            child_desc = prepare_docstring(child_desc, variables=ctx_vars)\n            child_epilog = prepare_docstring(child_epilog, variables=ctx_vars)\n\n            subparser.add_help = (\n                False  # child.query_cfg_inst(\"help_enable\", default=True)\n            )\n            subparser.usage = child_usage\n            subparser.description = child_desc\n            subparser.epilog = child_epilog\n\n            # pprint (subparser.__dict__)\n\n        else:\n            # This part is in BETA\n\n            # Create nested structure\n            child = self.cls(parent=config)\n            # Pass help text from Command class kwargs\n            child.parser.help = self.kwargs.get(\"help\", child.__doc__)\n            argparse_inject_as_subparser(config.parser, key, child.parser)\n\n        return child\n</code></pre>"},{"location":"api/parser/#clak.parser.SubParser.attach_sub_to_parser","title":"<code>attach_sub_to_parser(key, config)</code>","text":"<p>Create a subcommand parser for this command.</p> <p>Creates a new subparser for the command and configures it with the appropriate help text and options. Validates that the command name is valid.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Name of the subcommand</p> required <code>config</code> <code>ParserNode</code> <p>Parent parser configuration object</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If command name contains spaces</p> <p>Returns:</p> Name Type Description <code>ParserNode</code> <code>ParserNode</code> <p>The created child parser instance</p> Source code in <code>clak/parser.py</code> <pre><code>def attach_sub_to_parser(self, key: str, config: \"ParserNode\") -&gt; \"ParserNode\":\n    \"\"\"Create a subcommand parser for this command.\n\n    Creates a new subparser for the command and configures it with the appropriate\n    help text and options. Validates that the command name is valid.\n\n    Args:\n        key (str): Name of the subcommand\n        config (ParserNode): Parent parser configuration object\n\n    Raises:\n        ValueError: If command name contains spaces\n\n    Returns:\n        ParserNode: The created child parser instance\n    \"\"\"\n\n    if \" \" in key:\n        raise ValueError(\n            f\"Command name '{key}' contains spaces. Command names must not contain spaces.\"\n        )\n\n    if self.use_subparsers:\n\n        logger.debug(\n            \"Create new subparser %s.%s\",\n            config.get_fname(attr=\"key\"),\n            key,\n        )  # , self.kwargs)\n\n        # Fetch help from class\n        parser_help = self.kwargs.get(\n            \"help\",\n            self.cls.query_cfg_inst(\n                self.cls, \"help_description\", default=self.cls.__doc__\n            ),\n        )\n        parser_help_enabled = self.kwargs.get(\n            \"help_flags\",\n            self.cls.query_cfg_inst(self.cls, \"help_flags\", default=True),\n        )\n\n        ctx_vars = {\"key\": key, \"self\": config}\n\n        # Create a new subparser for this command (flat structure)\n        parser_help = prepare_docstring(\n            first_doc_line(parser_help), variables=ctx_vars\n        )\n        parser_kwargs = {\n            \"formatter_class\": RecursiveHelpFormatter,\n            \"add_help\": parser_help_enabled,  # Add support for --help\n            \"exit_on_error\": False,\n            \"help\": parser_help,\n        }\n        # if parser_help is not None:\n        #     parser_kwargs[\"help\"] = parser_help\n\n        # Create parser\n        subparser = config.subparsers.add_parser(\n            key,\n            **parser_kwargs,\n        )\n\n        # Create an instance of the command class with the subparser\n        child = self.cls(parent=config, parser=subparser, key=key)\n        ctx_vars[\"self\"] = child\n\n        # logger.debug(\n        #     \"Create new SUBPARSER %s %s %s\",\n        #     child.get_fname(attr=\"key\"),\n        #     key,\n        #     self.kwargs,\n        # )\n\n        child_usage = child.query_cfg_inst(\"help_usage\", default=None)\n        child_desc = first_doc_line(\n            child.query_cfg_inst(\"help_description\", default=child.__doc__)\n        )\n        child_epilog = child.query_cfg_inst(\"help_epilog\", default=None)\n        # print(f\"DESC: |{desc}|\")\n\n        # Reconfigure subparser\n        child_usage = prepare_docstring(child_usage, variables=ctx_vars)\n        child_desc = prepare_docstring(child_desc, variables=ctx_vars)\n        child_epilog = prepare_docstring(child_epilog, variables=ctx_vars)\n\n        subparser.add_help = (\n            False  # child.query_cfg_inst(\"help_enable\", default=True)\n        )\n        subparser.usage = child_usage\n        subparser.description = child_desc\n        subparser.epilog = child_epilog\n\n        # pprint (subparser.__dict__)\n\n    else:\n        # This part is in BETA\n\n        # Create nested structure\n        child = self.cls(parent=config)\n        # Pass help text from Command class kwargs\n        child.parser.help = self.kwargs.get(\"help\", child.__doc__)\n        argparse_inject_as_subparser(config.parser, key, child.parser)\n\n    return child\n</code></pre>"},{"location":"api/parser/#clak.parser.first_doc_line","title":"<code>first_doc_line(text)</code>","text":"<p>Get the first non-empty line from a text string.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to extract the first line from</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The first non-empty line, or empty string if no non-empty lines found</p> <p>Raises:</p> Type Description <code>AssertionError</code> <p>If first non-empty line starts with spaces</p> Source code in <code>clak/parser.py</code> <pre><code>def first_doc_line(text: str) -&gt; str:\n    \"\"\"Get the first non-empty line from a text string.\n\n    Args:\n        text (str): The text to extract the first line from\n\n    Returns:\n        str: The first non-empty line, or empty string if no non-empty lines found\n\n    Raises:\n        AssertionError: If first non-empty line starts with spaces\n    \"\"\"\n    lines = text.split(\"\\n\")\n    for line in lines:\n        if line.strip():\n            assert not line.startswith(\n                \" \"\n            ), f\"First line of docstring should not start with 2 spaces: {line}\"\n            return line\n    return \"\"\n</code></pre>"},{"location":"api/parser/#clak.parser.prepare_docstring","title":"<code>prepare_docstring(text, variables=None, reindent='')</code>","text":"<p>Prepare a docstring by deindenting and formatting with variables.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The docstring text to prepare</p> required <code>variables</code> <code>dict</code> <p>Variables to format into the docstring</p> <code>None</code> <code>reindent</code> <code>str</code> <p>String to use for reindenting</p> <code>''</code> <p>Returns:</p> Name Type Description <code>str</code> <code>Optional[str]</code> <p>The prepared docstring, or None/SUPPRESS if input was None/SUPPRESS</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>If formatting fails due to missing variables</p> <code>AssertionError</code> <p>If variables arg is not a dict</p> Source code in <code>clak/parser.py</code> <pre><code>def prepare_docstring(\n    text: Optional[str], variables: Optional[Dict[str, Any]] = None, reindent: str = \"\"\n) -&gt; Optional[str]:\n    \"\"\"Prepare a docstring by deindenting and formatting with variables.\n\n    Args:\n        text (str): The docstring text to prepare\n        variables (dict, optional): Variables to format into the docstring\n        reindent (str, optional): String to use for reindenting\n\n    Returns:\n        str: The prepared docstring, or None/SUPPRESS if input was None/SUPPRESS\n\n    Raises:\n        KeyError: If formatting fails due to missing variables\n        AssertionError: If variables arg is not a dict\n    \"\"\"\n\n    variables = variables or {}\n    assert isinstance(variables, dict), f\"Got {type(variables)} instead of dict\"\n\n    if text is None:\n        return None\n    if text == SUPPRESS:\n        return SUPPRESS\n\n    text = deindent_docstring(text, reindent=reindent)\n    try:\n        text = text.format(**variables)\n    except KeyError as err:\n        print(f\"Error formatting docstring: {err}\")\n        print(f\"Variables: {variables}\")\n        print(f\"Text: {text}\")\n        raise err\n\n    return text\n</code></pre>"},{"location":"api/plugin_complete/","title":"Completion","text":""},{"location":"api/plugin_complete/#clak.comp.completion","title":"<code>clak.comp.completion</code>","text":"<p>Register a Python executable for use with the argcomplete module.</p> <p>To perform the registration, source the output of this script in your bash shell (quote the output to avoid interpolation).</p> <p>Example:</p> <pre><code>$ eval \"$(register-python-argcomplete my-favorite-script.py)\"\n</code></pre> <p>For Tcsh</p> <pre><code>$ eval `register-python-argcomplete --shell tcsh my-favorite-script.py`\n</code></pre> <p>For Fish</p> <pre><code>$ register-python-argcomplete --shell fish my-favourite-script.py         &gt; ~/.config/fish/my-favourite-script.py.fish\n</code></pre>"},{"location":"api/plugin_complete/#clak.comp.completion.CompCmdRender","title":"<code>CompCmdRender</code>","text":"<p>               Bases: <code>CompRenderCmdMixin</code>, <code>Parser</code></p> <p>Command completion renderer class.</p> <p>Combines the CompRenderCmdMixin with the base Parser to create a class that can render command completion code. This class provides the core functionality for generating shell completion scripts for command-line tools.</p> <p>Key features: - Generates shell completion code for bash/tcsh/fish - Supports external completion scripts - Configurable executable names - Default completion behavior</p> Source code in <code>clak/comp/completion.py</code> <pre><code>class CompCmdRender(CompRenderCmdMixin, Parser):\n    \"\"\"Command completion renderer class.\n\n    Combines the CompRenderCmdMixin with the base Parser to create a class that can\n    render command completion code. This class provides the core functionality for\n    generating shell completion scripts for command-line tools.\n\n    Key features:\n    - Generates shell completion code for bash/tcsh/fish\n    - Supports external completion scripts\n    - Configurable executable names\n    - Default completion behavior\n    \"\"\"\n</code></pre>"},{"location":"api/plugin_complete/#clak.comp.completion.CompRenderCmdMixin","title":"<code>CompRenderCmdMixin</code>","text":"<p>               Bases: <code>CompRenderMixin</code></p> <p>Completion command support</p> Source code in <code>clak/comp/completion.py</code> <pre><code>class CompRenderCmdMixin(CompRenderMixin):\n    \"Completion command support\"\n\n    use_defaults = Argument(\n        \"--no-defaults\",\n        # dest=\"use_defaults\",\n        action=\"store_false\",\n        default=True,\n        help=\"when no matches are generated, do not fallback to readline's\"\n        + \" default completion (affects bash only)\",\n    )\n    complete_arguments = Argument(\n        \"--complete-arguments\",\n        nargs=argparse.REMAINDER,\n        help=\"arguments to call complete with; use of this option discards default\"\n        + \" options (affects bash only)\",\n    )\n    shell = Argument(\n        \"-s\",\n        \"--shell\",\n        choices=(\"bash\", \"zsh\", \"tcsh\", \"fish\", \"powershell\"),\n        default=\"bash\",\n        help=\"output code for the specified shell\",\n    )\n    external_argcomplete_script = Argument(\n        \"-e\",\n        \"--external-argcomplete-script\",\n        help=argparse.SUPPRESS,\n        # help=\"external argcomplete script for auto completion of the executable\"\n    )\n    executable = Argument(\n        \"--executable\",\n        nargs=\"+\",\n        help=argparse.SUPPRESS,\n        default=[\"my_app_name\"],\n    )\n\n    def cli_run(self, ctx, **kwargs):  # pylint: disable=unused-argument\n        \"\"\"Command completion support mixin.\n\n        Adds command completion support to parsers by providing arguments to configure\n        shell completion behavior:\n\n        - --no-defaults: Disable fallback to readline defaults (bash only)\n        - --complete-arguments: Custom completion arguments (bash only)\n        - --shell: Target shell (bash, zsh, tcsh, fish, powershell)\n        - --executable: Name of executable to complete\n\n        The mixin generates the appropriate shell completion code when run.\n        Supports bash (default), zsh, tcsh, fish and powershell shells.\n\n        Example:\n            my-app completion  # Outputs bash completion code\n            my-app completion --shell zsh  # Outputs zsh completion code\n        \"\"\"\n\n        print(\"COMPLETION\")\n        self.print_completion_stdout(ctx)\n        print(\"COMPLETION\")\n</code></pre>"},{"location":"api/plugin_complete/#clak.comp.completion.CompRenderCmdMixin.cli_run","title":"<code>cli_run(ctx, **kwargs)</code>","text":"<p>Command completion support mixin.</p> <p>Adds command completion support to parsers by providing arguments to configure shell completion behavior:</p> <ul> <li>--no-defaults: Disable fallback to readline defaults (bash only)</li> <li>--complete-arguments: Custom completion arguments (bash only)</li> <li>--shell: Target shell (bash, zsh, tcsh, fish, powershell)</li> <li>--executable: Name of executable to complete</li> </ul> <p>The mixin generates the appropriate shell completion code when run. Supports bash (default), zsh, tcsh, fish and powershell shells.</p> <p>Example</p> <p>my-app completion  # Outputs bash completion code my-app completion --shell zsh  # Outputs zsh completion code</p> Source code in <code>clak/comp/completion.py</code> <pre><code>def cli_run(self, ctx, **kwargs):  # pylint: disable=unused-argument\n    \"\"\"Command completion support mixin.\n\n    Adds command completion support to parsers by providing arguments to configure\n    shell completion behavior:\n\n    - --no-defaults: Disable fallback to readline defaults (bash only)\n    - --complete-arguments: Custom completion arguments (bash only)\n    - --shell: Target shell (bash, zsh, tcsh, fish, powershell)\n    - --executable: Name of executable to complete\n\n    The mixin generates the appropriate shell completion code when run.\n    Supports bash (default), zsh, tcsh, fish and powershell shells.\n\n    Example:\n        my-app completion  # Outputs bash completion code\n        my-app completion --shell zsh  # Outputs zsh completion code\n    \"\"\"\n\n    print(\"COMPLETION\")\n    self.print_completion_stdout(ctx)\n    print(\"COMPLETION\")\n</code></pre>"},{"location":"api/plugin_complete/#clak.comp.completion.CompRenderMixin","title":"<code>CompRenderMixin</code>","text":"<p>Completion support Methods</p> Source code in <code>clak/comp/completion.py</code> <pre><code>class CompRenderMixin:  # pylint: disable=too-few-public-methods\n    \"Completion support Methods\"\n\n    def print_completion_stdout(self, args: SimpleNamespace) -&gt; None:\n        \"\"\"Print completion script to stdout.\n\n        Generates and outputs shell completion code for the specified executable using argcomplete.\n        The completion script enables tab completion for commands and arguments.\n\n        Args:\n            args: Namespace containing completion configuration:\n                executable: Name of executable to enable completion for\n                use_defaults: Whether to fallback to readline defaults (bash only)\n                shell: Target shell (bash, zsh, tcsh, fish, powershell)\n                complete_arguments: Optional arguments to pass to complete command\n                external_argcomplete_script: Optional external completion script\n        \"\"\"\n\n        sys.stdout.write(\n            argcomplete.shellcode(\n                args.executable,\n                args.use_defaults,\n                args.shell,\n                args.complete_arguments,\n                args.external_argcomplete_script,\n            )\n        )\n</code></pre>"},{"location":"api/plugin_complete/#clak.comp.completion.CompRenderMixin.print_completion_stdout","title":"<code>print_completion_stdout(args)</code>","text":"<p>Print completion script to stdout.</p> <p>Generates and outputs shell completion code for the specified executable using argcomplete. The completion script enables tab completion for commands and arguments.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>SimpleNamespace</code> <p>Namespace containing completion configuration: executable: Name of executable to enable completion for use_defaults: Whether to fallback to readline defaults (bash only) shell: Target shell (bash, zsh, tcsh, fish, powershell) complete_arguments: Optional arguments to pass to complete command external_argcomplete_script: Optional external completion script</p> required Source code in <code>clak/comp/completion.py</code> <pre><code>def print_completion_stdout(self, args: SimpleNamespace) -&gt; None:\n    \"\"\"Print completion script to stdout.\n\n    Generates and outputs shell completion code for the specified executable using argcomplete.\n    The completion script enables tab completion for commands and arguments.\n\n    Args:\n        args: Namespace containing completion configuration:\n            executable: Name of executable to enable completion for\n            use_defaults: Whether to fallback to readline defaults (bash only)\n            shell: Target shell (bash, zsh, tcsh, fish, powershell)\n            complete_arguments: Optional arguments to pass to complete command\n            external_argcomplete_script: Optional external completion script\n    \"\"\"\n\n    sys.stdout.write(\n        argcomplete.shellcode(\n            args.executable,\n            args.use_defaults,\n            args.shell,\n            args.complete_arguments,\n            args.external_argcomplete_script,\n        )\n    )\n</code></pre>"},{"location":"api/plugin_complete/#clak.comp.completion.CompRenderOptMixin","title":"<code>CompRenderOptMixin</code>","text":"<p>               Bases: <code>CompRenderMixin</code></p> <p>Completion options support mixin.</p> <p>Adds option completion support to parsers by providing a --completion flag that generates shell completion code. When used, outputs the appropriate completion code for the configured shell.</p> <p>The mixin adds: - --completion flag to generate shell completion code - Default completion behavior configuration - Shell-specific completion code generation</p> <p>Supports bash (default), zsh, tcsh, fish and powershell shells.</p> Source code in <code>clak/comp/completion.py</code> <pre><code>class CompRenderOptMixin(CompRenderMixin):\n    \"\"\"Completion options support mixin.\n\n    Adds option completion support to parsers by providing a --completion flag\n    that generates shell completion code. When used, outputs the appropriate\n    completion code for the configured shell.\n\n    The mixin adds:\n    - --completion flag to generate shell completion code\n    - Default completion behavior configuration\n    - Shell-specific completion code generation\n\n    Supports bash (default), zsh, tcsh, fish and powershell shells.\n    \"\"\"\n\n    completion_cmd = Argument(\n        \"--completion\",\n        action=\"store_true\",\n        help=\"output code for the specified shell\",\n    )\n\n    def cli_run(self, ctx, **kwargs):\n        \"\"\"Completion options support mixin.\n\n        Adds option completion support to parsers by providing:\n        - --completion flag to generate shell completion code\n        - Default completion behavior configuration\n        - Shell-specific completion code generation\n\n        The mixin adds a --completion argument that when used will output the appropriate\n        shell completion code. It supports:\n        - bash (default)\n        - zsh\n        - tcsh\n        - fish\n        - powershell\n\n        Example:\n            my-app --completion  # Outputs bash completion code\n            my-app --completion --shell zsh  # Outputs zsh completion code\n        \"\"\"\n\n        args = ctx.args\n\n        kwargs = {\n            \"executable\": [\"my_app_name\"],\n            \"shell\": \"bash\",\n            \"use_defaults\": True,\n            \"complete_arguments\": [],\n            \"external_argcomplete_script\": None,\n        }\n        if args.completion_cmd is True:\n            self.print_completion_stdout(SimpleNamespace(**kwargs))\n        else:\n            super().cli_run(ctx, **kwargs)\n</code></pre>"},{"location":"api/plugin_complete/#clak.comp.completion.CompRenderOptMixin.cli_run","title":"<code>cli_run(ctx, **kwargs)</code>","text":"<p>Completion options support mixin.</p> <p>Adds option completion support to parsers by providing: - --completion flag to generate shell completion code - Default completion behavior configuration - Shell-specific completion code generation</p> <p>The mixin adds a --completion argument that when used will output the appropriate shell completion code. It supports: - bash (default) - zsh - tcsh - fish - powershell</p> <p>Example</p> <p>my-app --completion  # Outputs bash completion code my-app --completion --shell zsh  # Outputs zsh completion code</p> Source code in <code>clak/comp/completion.py</code> <pre><code>def cli_run(self, ctx, **kwargs):\n    \"\"\"Completion options support mixin.\n\n    Adds option completion support to parsers by providing:\n    - --completion flag to generate shell completion code\n    - Default completion behavior configuration\n    - Shell-specific completion code generation\n\n    The mixin adds a --completion argument that when used will output the appropriate\n    shell completion code. It supports:\n    - bash (default)\n    - zsh\n    - tcsh\n    - fish\n    - powershell\n\n    Example:\n        my-app --completion  # Outputs bash completion code\n        my-app --completion --shell zsh  # Outputs zsh completion code\n    \"\"\"\n\n    args = ctx.args\n\n    kwargs = {\n        \"executable\": [\"my_app_name\"],\n        \"shell\": \"bash\",\n        \"use_defaults\": True,\n        \"complete_arguments\": [],\n        \"external_argcomplete_script\": None,\n    }\n    if args.completion_cmd is True:\n        self.print_completion_stdout(SimpleNamespace(**kwargs))\n    else:\n        super().cli_run(ctx, **kwargs)\n</code></pre>"},{"location":"api/plugin_config/","title":"Config","text":""},{"location":"api/plugin_config/#clak.comp.config","title":"<code>clak.comp.config</code>","text":"<p>Register a Python executable for use with the argcomplete module.</p> <p>To perform the registration, source the output of this script in your bash shell (quote the output to avoid interpolation).</p> <p>Example:</p> <pre><code>$ eval \"$(register-python-argcomplete my-favorite-script.py)\"\n</code></pre> <p>For Tcsh</p> <pre><code>$ eval `register-python-argcomplete --shell tcsh my-favorite-script.py`\n</code></pre> <p>For Fish</p> <pre><code>$ register-python-argcomplete --shell fish         my-favourite-script.py &gt; ~/.config/fish/my-favourite-script.py.fish\n</code></pre>"},{"location":"api/plugin_config/#clak.comp.config.XDGConfigMixin","title":"<code>XDGConfigMixin</code>","text":"<p>XDG configuration support mixin.</p> <p>Provides standard XDG base directory arguments for configuration files and directories: - --conf-file: Config file path ($XDG_CONFIG_HOME/my_app/config.yaml) - --data-dir: Data directory ($XDG_DATA_HOME/my_app) - --cache-dir: Cache directory ($XDG_CACHE_HOME/my_app) - --log-dir: Log directory ($XDG_CACHE_HOME/my_app/logs)</p> Source code in <code>clak/comp/config.py</code> <pre><code>class XDGConfigMixin:  # pylint: disable=too-few-public-methods\n    \"\"\"XDG configuration support mixin.\n\n    Provides standard XDG base directory arguments for configuration files and directories:\n    - --conf-file: Config file path ($XDG_CONFIG_HOME/my_app/config.yaml)\n    - --data-dir: Data directory ($XDG_DATA_HOME/my_app)\n    - --cache-dir: Cache directory ($XDG_CACHE_HOME/my_app)\n    - --log-dir: Log directory ($XDG_CACHE_HOME/my_app/logs)\n    \"\"\"\n\n    # config_dir = Argument('--config-dir', help=argparse.SUPPRESS,\n    #     default=os.path.expanduser(\"~/.config/my_app\"))\n\n    # For AI:\n    # This class should provide following arguments:\n    # --conf-file = $XDG_CONFIG_HOME/my_app/config.yaml\n    # --data-dir = $XDG_DATA_HOME/my_app\n    # --cache-dir = $XDG_CACHE_HOME/my_app\n    # --log-dir = $XDG_CACHE_HOME/my_app/logs\n\n    # XDG base directories with defaults\n    xdg_config = Argument(\n        \"--conf-file\",\n        # help=argparse.SUPPRESS,\n        help=\"Configuration file to use\",\n        default=os.path.expanduser(\"~/.config/my_app/config.yaml\"),\n    )\n    xdg_data_dir = Argument(\n        \"--data-dir\",\n        help=argparse.SUPPRESS,\n        default=os.path.expanduser(\"~/.local/share/my_app\"),\n    )\n    xdg_cache_dir = Argument(\n        \"--cache-dir\",\n        help=argparse.SUPPRESS,\n        default=os.path.expanduser(\"~/.cache/my_app\"),\n    )\n    xdg_log_dir = Argument(\n        \"--log-dir\",\n        help=argparse.SUPPRESS,\n        default=os.path.expanduser(\"~/.cache/my_app/logs\"),\n    )\n</code></pre>"},{"location":"api/plugin_logging/","title":"Logging","text":""},{"location":"api/plugin_logging/#clak.comp.logging","title":"<code>clak.comp.logging</code>","text":"<p>Provides logging functionality and configuration for CLI applications.</p> <p>This module implements a flexible logging system with the following key features: - Configurable log levels and verbosity through CLI arguments - Support for colored output (when coloredlogs is installed) - Multiple log formatters (default, extended, audit, debug) - Hierarchical logger naming with prefix/suffix support - Mixin class for easy integration with CLI parsers</p> <p>The logging system can be configured through Meta settings in parser classes: - log_prefix: Sets the base name for loggers (typically name) - log_suffix: Controls the right part of logger names - log_default_level: Sets the default logging level</p> <p>Notes: - <code>log_prefix</code> must be enabled to allow CLI logging.</p> <p>Example:</p> <pre><code>class AppMain(LoggingOptMixin,Parser):\n\n\n    class Meta:\n\n        log_prefix = f\"{__name__}\"    # AKA myapp\n        # log_prefix = f\"other_prefix.{__name__}\"\n        # log_prefix = f\"{__name__}.other_prefix\"\n        # log_suffix = \"suffix\"\n\n    def cli_group(self, ctx, **_):\n        \"Main group\"\n\n        # Usual logger, usually from logger = logging.getLogger(__name__)\n        logger.debug(\"Hello World - App\")\n        logger.info(\"Hello World - App\")\n        logger.warning(\"Hello World - App\")\n        logger.error(\"Hello World - App\")\n\n        # Only useful when `log_prefix` is set\n        self.logger.debug(\"Hello World - Self\")\n        self.logger.info(\"Hello World - Self\")\n        self.logger.warning(\"Hello World - Self\")\n        self.logger.error(\"Hello World - Self\")\n</code></pre> <p>Without log_prefix set (by default): <pre><code> WARNING myapp.cli                 Hello World - App\n   ERROR myapp.cli                 Hello World - App\n WARNING clak.parser               Hello World - Self\n   ERROR clak.parser               Hello World - Self\n</code></pre></p> <p>With log_prefix set: <pre><code> WARNING myapp.cli                 Hello World - App\n   ERROR myapp.cli                 Hello World - App\n WARNING myapp.cli.AppMain         Hello World - Self\n   ERROR myapp.cli.AppMain         Hello World - Self\n</code></pre></p>"},{"location":"api/plugin_logging/#clak.comp.logging.LoggingOptMixin","title":"<code>LoggingOptMixin</code>","text":"<p>               Bases: <code>PluginHelpers</code></p> <p>Logging options support</p> Source code in <code>clak/comp/logging.py</code> <pre><code>class LoggingOptMixin(PluginHelpers):\n    \"Logging options support\"\n\n    verbosity = Argument(\n        \"-v\",\n        \"--verbose\",\n        action=\"count\",\n        default=0,\n        help=\"Increase verbosity level (-v, -vv, -vvv, -vvvv)\",\n    )\n\n    log_format = Argument(\n        \"--log-format\",\n        choices=[\"default\", \"extended\", \"audit\", \"debug\"],\n        help=\"Set log formatter\",\n        # help=argparse.SUPPRESS,\n        default=\"default\",\n    )\n\n    app_trace_mode = Argument(\n        \"--trace\",\n        default=False,\n        action=argparse.BooleanOptionalAction,\n        help=\"Enable trace logging on errors\",\n    )\n\n    if coloredlogs:\n        log_colors = Argument(\n            \"--log-colors\",\n            default=True,\n            action=argparse.BooleanOptionalAction,\n            help=\"Enable colored logs\",\n        )\n\n    logger_level_default = Argument(\n        \"--logger-level\",\n        choices=[\"debug\", \"info\", \"warning\", \"error\", \"critical\"],\n        # help='Set log level'\n        help=argparse.SUPPRESS,\n        default=logging.WARNING,\n    )\n\n    # Meta settings\n    meta__config__log_prefix = MetaSetting(\n        help=\"Prefix of the logger name, usually set to __name__. Required to enable logging.\",\n    )\n    meta__config__log_suffix = MetaSetting(\n        help=\"Suffix of the logger name, override the right part.\",\n    )\n    meta__config__log_default_level = MetaSetting(\n        help=\"Default log level of the logger, usually WARNING, INFO or DEBUG\",\n    )\n\n    meta__config__log_levels = MetaSetting(\n        help=\"List of log levels to use, usually INFO and DEBUG\",\n    )\n\n    meta__config__log_silent = MetaSetting(\n        help=\"List of loggers to silent, usually too verbose loggers\",\n    )\n\n    logger = None\n\n    def wip(self, config, req=None, stacked=True):\n        \"WIP\"\n\n        config = config or []\n\n        assert isinstance(config, list), f\"config must be a list, got {type(config)}\"\n\n        # Process levels xonfig\n        errors = []\n        levels = [logging.INFO, logging.DEBUG]\n        ret = []\n        for logger_names in config:\n            for level in levels:\n                assert isinstance(\n                    logger_names, list\n                ), f\"logger_names must be a list, got {type(logger_names)}\"\n                assert all(\n                    isinstance(x, str) for x in logger_names\n                ), f\"logger_names must be a list of strings, got {logger_names}\"\n                ret.append((level, logger_names))\n\n        max_ = len(ret)\n        # Return specific level\n        if req is not None:\n\n            if req &gt;= max_:\n                errors += [f\"Verbosity already set to max: {req}/{max_-1}\"]\n                req = max_ - 1\n            elif req &lt; 0:\n                errors += [f\"Verbosity too low, setting to min: {req}/{max_-1}\"]\n                req = 0\n            # if errors:\n            #     logger.warning(\",\".join(errors))\n\n            level = ret[req][0]\n            if stacked:\n                names = []\n                for _logger in ret[0 : req + 1]:\n                    names.extend(_logger[1])\n                names = list(set(names))\n            else:\n                names = ret[req][1]\n\n            return level, names, max_, errors\n\n        return ret\n\n    def cli_hook__logging(self, instance, ctx, **_):\n        \"Inject or create logger into instance\"\n\n        logger.debug(\"Load Logging hook for %s\", instance)\n\n        log_prefix = self.query_cfg_parents(\n            \"log_prefix\", default=None, include_self=True\n        )\n        log_suffix = self.query_cfg_parents(\n            \"log_suffix\", default=None, include_self=True\n        )\n\n        if ctx.cli_first:\n\n            log_levels = self.query_cfg_parents(\n                \"log_levels\", default=None, include_self=True\n            )\n            log_silent = self.query_cfg_parents(\n                \"log_silent\", default=None, include_self=True\n            )\n\n            log_verbosity = ctx.args.verbosity\n            log_colors = ctx.args.get(\"log_colors\", False)\n\n            log_default_config = {\n                \"\": {  # root logger\n                    \"handlers\": [\"default\"],\n                    \"level\": \"WARNING\",\n                    \"propagate\": False,\n                },\n            }\n\n            log_silent = log_silent or []\n            DEFAULT_CONFIG = [\n                [\"clak\"],\n                [\"\"],\n            ]\n            log_levels = log_levels or DEFAULT_CONFIG\n\n            log_lvl, logger_names, max_level, errors = self.wip(\n                log_levels, req=log_verbosity\n            )\n\n            new_conf = dict(log_default_config)\n            conf2 = {}\n            for logger_name in logger_names:\n                conf2[logger_name] = {\n                    \"handlers\": [\"default\"],\n                    \"level\": log_lvl,\n                    \"propagate\": False,\n                }\n            if max_level &gt; log_verbosity:\n                print(\"SILENTED\", max_level, log_verbosity)\n                # print(\"All logs are shown\")\n                # Only when not super extra verbose requested\n                for logger_name in log_silent:\n                    conf2[logger_name] = {\n                        \"handlers\": [\"default\"],\n                        \"level\": \"WARNING\",\n                        \"propagate\": False,\n                    }\n            if max_level &lt; log_verbosity:\n                raise ClakAppError(\n                    f\"Verbosity too high, max is {max_level}, got {log_verbosity}\"\n                )\n\n            log_level_name = LOGGING_LEVELS.get(log_lvl, log_lvl)\n            new_conf.update(conf2)\n            # from pprint import pprint\n            # print(\"-\" * 80)\n            # pprint(new_conf)\n            # pprint(LOGGING_LEVELS)\n            # print(\"-\" * 80)\n\n            get_app_logger(\n                loggers=new_conf,\n                # loggers=log_config,\n                # level=cfg.logger_level,\n                level=log_lvl,\n                formatter=ctx.args.log_format,\n                colors=log_colors,\n            )\n\n            # Report to user\n            logger.info(\n                \"Logging set to %s/%s %s: %s\",\n                ctx.args.verbosity,\n                max_level,\n                log_level_name,\n                \", \".join([x for x in logger_names if x]),\n            )\n            logger.info(\"Logging to WARNING: %s\", \", \".join(log_silent))\n            if errors:\n                logger.warning(\", \".join(errors))\n\n        # Create internal logger instance if not already created\n        suffix = log_suffix\n        if log_suffix is None:\n            log_suffix = \"==FLAT==\"\n\n        if log_suffix == argparse.SUPPRESS:\n            suffix = \"\"\n        elif log_suffix == \"==FLAT==\":\n            name = instance.__class__.__name__\n            suffix = f\".{name}\"\n        elif log_suffix == \"==NESTED==\":\n            suffix = f\"{instance.get_fname(attr='key')}\"\n\n        # enabled_instance_logging = False\n        # if log_enabled and getattr(instance, \"logger\", None) is None:\n        # if log_enabled:\n\n        if log_prefix is not None:\n\n            # Retrieve prog_name from ctx\n\n            log_name = f\"{log_prefix}{suffix}\"\n            # print(\"YOOOOOO\", log_name)\n            if instance.parent is None:\n                instance.logger = logging.getLogger(log_name)\n            else:\n                instance.logger = logging.getLogger(log_name)\n            # else:\n            #     instance.logger = instance.parent.logger\n\n            logger.debug(\"Enable logging for '%s': %s\", instance, log_name)\n            # instance.logger.debug(\"Enable logging for %s\", instance)\n\n        # Register plugin methods\n        self.hook_register(\"test_logger\", instance)\n\n        logger.debug(\"Logging hook loaded for %s\", instance)\n\n        ctx.plugins.update(\n            {\n                \"log_acquired_root_logger\": True,\n                \"log_prefix\": log_prefix,\n                \"log_suffix_req\": log_suffix,\n                \"log_suffix\": suffix,\n                # \"log_default_level\": log_default_level,\n            }\n        )\n\n    def test_logger(self, instance: object | None = None) -&gt; None:\n        \"\"\"Test the logger by sending test messages at different log levels.\n\n        Args:\n            instance: The instance to test logging for. If None, uses self.\n        \"\"\"\n        instance = instance if instance else self\n\n        # print(\"Test log self=\", self, \"instance=\", instance)\n        # print(\"\\n\\n\")\n        # return\n        instance.logger.debug(\"Test logger with DEBUG\")\n        instance.logger.info(\"Test logger with INFO\")\n        instance.logger.warning(\"Test logger with WARNING\")\n        instance.logger.error(\"Test logger with ERROR\")\n        instance.logger.critical(\"Test logger with CRITICAL\")\n</code></pre>"},{"location":"api/plugin_logging/#clak.comp.logging.LoggingOptMixin.cli_hook__logging","title":"<code>cli_hook__logging(instance, ctx, **_)</code>","text":"<p>Inject or create logger into instance</p> Source code in <code>clak/comp/logging.py</code> <pre><code>def cli_hook__logging(self, instance, ctx, **_):\n    \"Inject or create logger into instance\"\n\n    logger.debug(\"Load Logging hook for %s\", instance)\n\n    log_prefix = self.query_cfg_parents(\n        \"log_prefix\", default=None, include_self=True\n    )\n    log_suffix = self.query_cfg_parents(\n        \"log_suffix\", default=None, include_self=True\n    )\n\n    if ctx.cli_first:\n\n        log_levels = self.query_cfg_parents(\n            \"log_levels\", default=None, include_self=True\n        )\n        log_silent = self.query_cfg_parents(\n            \"log_silent\", default=None, include_self=True\n        )\n\n        log_verbosity = ctx.args.verbosity\n        log_colors = ctx.args.get(\"log_colors\", False)\n\n        log_default_config = {\n            \"\": {  # root logger\n                \"handlers\": [\"default\"],\n                \"level\": \"WARNING\",\n                \"propagate\": False,\n            },\n        }\n\n        log_silent = log_silent or []\n        DEFAULT_CONFIG = [\n            [\"clak\"],\n            [\"\"],\n        ]\n        log_levels = log_levels or DEFAULT_CONFIG\n\n        log_lvl, logger_names, max_level, errors = self.wip(\n            log_levels, req=log_verbosity\n        )\n\n        new_conf = dict(log_default_config)\n        conf2 = {}\n        for logger_name in logger_names:\n            conf2[logger_name] = {\n                \"handlers\": [\"default\"],\n                \"level\": log_lvl,\n                \"propagate\": False,\n            }\n        if max_level &gt; log_verbosity:\n            print(\"SILENTED\", max_level, log_verbosity)\n            # print(\"All logs are shown\")\n            # Only when not super extra verbose requested\n            for logger_name in log_silent:\n                conf2[logger_name] = {\n                    \"handlers\": [\"default\"],\n                    \"level\": \"WARNING\",\n                    \"propagate\": False,\n                }\n        if max_level &lt; log_verbosity:\n            raise ClakAppError(\n                f\"Verbosity too high, max is {max_level}, got {log_verbosity}\"\n            )\n\n        log_level_name = LOGGING_LEVELS.get(log_lvl, log_lvl)\n        new_conf.update(conf2)\n        # from pprint import pprint\n        # print(\"-\" * 80)\n        # pprint(new_conf)\n        # pprint(LOGGING_LEVELS)\n        # print(\"-\" * 80)\n\n        get_app_logger(\n            loggers=new_conf,\n            # loggers=log_config,\n            # level=cfg.logger_level,\n            level=log_lvl,\n            formatter=ctx.args.log_format,\n            colors=log_colors,\n        )\n\n        # Report to user\n        logger.info(\n            \"Logging set to %s/%s %s: %s\",\n            ctx.args.verbosity,\n            max_level,\n            log_level_name,\n            \", \".join([x for x in logger_names if x]),\n        )\n        logger.info(\"Logging to WARNING: %s\", \", \".join(log_silent))\n        if errors:\n            logger.warning(\", \".join(errors))\n\n    # Create internal logger instance if not already created\n    suffix = log_suffix\n    if log_suffix is None:\n        log_suffix = \"==FLAT==\"\n\n    if log_suffix == argparse.SUPPRESS:\n        suffix = \"\"\n    elif log_suffix == \"==FLAT==\":\n        name = instance.__class__.__name__\n        suffix = f\".{name}\"\n    elif log_suffix == \"==NESTED==\":\n        suffix = f\"{instance.get_fname(attr='key')}\"\n\n    # enabled_instance_logging = False\n    # if log_enabled and getattr(instance, \"logger\", None) is None:\n    # if log_enabled:\n\n    if log_prefix is not None:\n\n        # Retrieve prog_name from ctx\n\n        log_name = f\"{log_prefix}{suffix}\"\n        # print(\"YOOOOOO\", log_name)\n        if instance.parent is None:\n            instance.logger = logging.getLogger(log_name)\n        else:\n            instance.logger = logging.getLogger(log_name)\n        # else:\n        #     instance.logger = instance.parent.logger\n\n        logger.debug(\"Enable logging for '%s': %s\", instance, log_name)\n        # instance.logger.debug(\"Enable logging for %s\", instance)\n\n    # Register plugin methods\n    self.hook_register(\"test_logger\", instance)\n\n    logger.debug(\"Logging hook loaded for %s\", instance)\n\n    ctx.plugins.update(\n        {\n            \"log_acquired_root_logger\": True,\n            \"log_prefix\": log_prefix,\n            \"log_suffix_req\": log_suffix,\n            \"log_suffix\": suffix,\n            # \"log_default_level\": log_default_level,\n        }\n    )\n</code></pre>"},{"location":"api/plugin_logging/#clak.comp.logging.LoggingOptMixin.test_logger","title":"<code>test_logger(instance=None)</code>","text":"<p>Test the logger by sending test messages at different log levels.</p> <p>Parameters:</p> Name Type Description Default <code>instance</code> <code>object | None</code> <p>The instance to test logging for. If None, uses self.</p> <code>None</code> Source code in <code>clak/comp/logging.py</code> <pre><code>def test_logger(self, instance: object | None = None) -&gt; None:\n    \"\"\"Test the logger by sending test messages at different log levels.\n\n    Args:\n        instance: The instance to test logging for. If None, uses self.\n    \"\"\"\n    instance = instance if instance else self\n\n    # print(\"Test log self=\", self, \"instance=\", instance)\n    # print(\"\\n\\n\")\n    # return\n    instance.logger.debug(\"Test logger with DEBUG\")\n    instance.logger.info(\"Test logger with INFO\")\n    instance.logger.warning(\"Test logger with WARNING\")\n    instance.logger.error(\"Test logger with ERROR\")\n    instance.logger.critical(\"Test logger with CRITICAL\")\n</code></pre>"},{"location":"api/plugin_logging/#clak.comp.logging.LoggingOptMixin.wip","title":"<code>wip(config, req=None, stacked=True)</code>","text":"<p>WIP</p> Source code in <code>clak/comp/logging.py</code> <pre><code>def wip(self, config, req=None, stacked=True):\n    \"WIP\"\n\n    config = config or []\n\n    assert isinstance(config, list), f\"config must be a list, got {type(config)}\"\n\n    # Process levels xonfig\n    errors = []\n    levels = [logging.INFO, logging.DEBUG]\n    ret = []\n    for logger_names in config:\n        for level in levels:\n            assert isinstance(\n                logger_names, list\n            ), f\"logger_names must be a list, got {type(logger_names)}\"\n            assert all(\n                isinstance(x, str) for x in logger_names\n            ), f\"logger_names must be a list of strings, got {logger_names}\"\n            ret.append((level, logger_names))\n\n    max_ = len(ret)\n    # Return specific level\n    if req is not None:\n\n        if req &gt;= max_:\n            errors += [f\"Verbosity already set to max: {req}/{max_-1}\"]\n            req = max_ - 1\n        elif req &lt; 0:\n            errors += [f\"Verbosity too low, setting to min: {req}/{max_-1}\"]\n            req = 0\n        # if errors:\n        #     logger.warning(\",\".join(errors))\n\n        level = ret[req][0]\n        if stacked:\n            names = []\n            for _logger in ret[0 : req + 1]:\n                names.extend(_logger[1])\n            names = list(set(names))\n        else:\n            names = ret[req][1]\n\n        return level, names, max_, errors\n\n    return ret\n</code></pre>"},{"location":"api/plugin_logging/#clak.comp.logging.get_app_logger","title":"<code>get_app_logger(loggers=None, level='WARNING', colors=False, formatter='default')</code>","text":"<p>Instanciate application logger</p> Source code in <code>clak/comp/logging.py</code> <pre><code>def get_app_logger(loggers=None, level=\"WARNING\", colors=False, formatter=\"default\"):\n    \"Instanciate application logger\"\n\n    loggers = loggers or {}\n\n    # Settings\n    fclass = \"logging.Formatter\"\n    # msconds = \"\"\n    if colors:\n        # Require coloredlogs\n        fclass = \"coloredlogs.ColoredFormatter\"\n        # msconds = \"%(msecs)03d\"\n\n    # Define formatters\n    formatters = {\n        \"default\": {\n            \"()\": fclass,\n            \"format\": LOG_FORMAT,\n            # \"format\": \"[%(levelname)8s] %(message)s\",\n            # 'datefmt': '%Y-%m-%d %H:%M:%S',\n        },\n        \"extended\": {\n            \"()\": fclass,\n            \"format\": \"[%(levelname)8s] %(name)s: %(message)s\",\n            \"datefmt\": \"%H:%M:%S\",\n        },\n        \"audit\": {\n            \"()\": fclass,\n            \"format\": \"%(asctime)s.%(msecs)03d [%(levelname)s] %(name)s: %(message)s\",\n            \"datefmt\": \"%Y-%m-%d %H:%M:%S\",\n        },\n        \"debug\": {\n            \"()\": fclass,\n            \"format\": \"%(msecs)03d %(levelname)8s %(name)-30s %(message)s\"\n            \"\\t[%(filename)s/%(funcName)s:%(lineno)d]\",\n            \"datefmt\": \"%H:%M:%S\",\n        },\n    }\n\n    # Assert arguments\n    if formatter not in formatters:\n        choice = \",\".join(formatters.keys())\n        raise ValueError(\n            f\"Invalid formatter: '{formatter}', please choose one of: {choice}\"\n        )\n\n    # Logging config\n    logging_config = {\n        \"version\": 1,\n        \"disable_existing_loggers\": False,  # Breaks exisitng logger if True\n        # How logs looks like\n        \"formatters\": formatters,\n        # Where goes the logs\n        \"handlers\": {\n            \"default\": {\n                \"level\": level,\n                \"formatter\": formatter,\n                \"class\": \"logging.StreamHandler\",\n                \"stream\": \"ext://sys.stderr\",  # Default is stderr\n            },\n            \"info\": {\n                \"level\": \"INFO\",\n                \"formatter\": formatter,\n                \"class\": \"logging.StreamHandler\",\n                \"stream\": \"ext://sys.stderr\",  # Default is stderr\n            },\n        },\n        # Where logs come from\n        \"loggers\": {\n            # Used to catch ALL logs\n            \"\": {  # root logger\n                \"handlers\": [\"default\"],\n                \"level\": \"WARNING\",\n                \"propagate\": False,\n            },\n            # # Used to catch all logs of myapp and sublibs\n            # 'myapp': {\n            #     'handlers': ['default'],\n            #     'level': 'INFO',\n            #     'propagate': False\n            # },\n            # # Used to catch cli logs only\n            # 'myapp.cli': {\n            #     'handlers': ['default'],\n            #     'level': 'INFO',\n            #     'propagate': False\n            # },\n            # # Used to catch app components, instanciated loggers\n            # 'myapp.comp': {\n            #     'handlers': ['default'],\n            #     'level': 'DEBUG',\n            #     'propagate': False\n            # },\n        },\n    }\n\n    # Prepare logger components\n    for name, conf in loggers.items():\n        logging_config[\"loggers\"][name] = {\n            \"propagate\": False,\n            \"handlers\": [\"default\"],\n        }\n        logging_config[\"loggers\"][name].update(conf)\n\n    # print(\"APPLIED CONFIG\")\n    # pprint(logging_config[\"loggers\"])\n\n    # Load logger\n    logging.config.dictConfig(logging_config)\n</code></pre>"},{"location":"api/plugins/","title":"Module API - Plugins","text":""},{"location":"architecture/0001-record-architecture-decisions/","title":"1. Record architecture decisions","text":"<p>Date: 2025-01-26</p>"},{"location":"architecture/0001-record-architecture-decisions/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"architecture/0001-record-architecture-decisions/#context","title":"Context","text":"<p>We need to record the architectural decisions made on this project.</p>"},{"location":"architecture/0001-record-architecture-decisions/#decision","title":"Decision","text":"<p>We will use Architecture Decision Records, as described by Michael Nygard.</p>"},{"location":"architecture/0001-record-architecture-decisions/#consequences","title":"Consequences","text":"<p>See Michael Nygard's article, linked above. For a lightweight ADR toolset, see Nat Pryce's adr-tools.</p>"},{"location":"architecture/0002-argparse-as-main-parser/","title":"2. Argparse as main parser","text":"<p>Date: 2025-01-26</p>"},{"location":"architecture/0002-argparse-as-main-parser/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"architecture/0002-argparse-as-main-parser/#context","title":"Context","text":"<p>The issue motivating this decision, and any context that influences or constrains the decision.</p> <p>Argparse is the de facto python command line parsing library, and it comes with almost everything. However, it's developper API is not that easy to use, code can become hard to read and to maintain, reusability is difficult and creating complex command lines can be a nightmare.</p> <p>There are plenty of other libraries, and they have their own pros and cons, some became quite heavy by the time, and even slow to run/start. The idea here is to keep things light, still while providing a nicer API for argparse.</p> <p>I ve been inspirated from many existing libraries</p> <p>Other libraries doing this apporach:</p> <ul> <li>cliff (openstack)<ul> <li>Views</li> <li>strong opiniated architecture</li> <li>class based config</li> </ul> </li> <li>click ()<ul> <li>Arg/Options distinction</li> <li>decorator based config</li> </ul> </li> <li>Typer ()</li> </ul>"},{"location":"architecture/0002-argparse-as-main-parser/#decision","title":"Decision","text":"<p>The change that we're proposing or have agreed to implement.</p> <p>We want to use argparse as primer parsing libray.</p> <p>We want to keep the same api, but we want to provide a new opiniated architecture: add_argument() =&gt; Argument, Option, Subcommand - We use click/Typer semantic here, as it's easier to make distinction between arguments, options and subcommands. In argparse, those concepts are quite mixed, and eventually make difficult onboarding.</p>"},{"location":"architecture/0002-argparse-as-main-parser/#consequences","title":"Consequences","text":"<p>What becomes easier or more difficult to do and any risks introduced by the change that will need to be mitigated.</p> <p>We try to keep the same logic, thus people knowing well argparse wont' be lost while newcomer may embrace easier argparsing.</p> <p>minimize learning curve bring opiniated architecture allow easy command based recursions, like git declarative configuration via class</p>"},{"location":"architecture/0003-no-argparse-merging/","title":"3. No argparse merging","text":"<p>Date: 2025-01-27</p>"},{"location":"architecture/0003-no-argparse-merging/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"architecture/0003-no-argparse-merging/#context","title":"Context","text":"<p>The issue motivating this decision, and any context that influences or constrains the decision.</p> <p>While it was an interesting feature, the argparse merging feature will not be provided. Indeed, during author experience, it has been increadily diffilcult to write a proper and reliable implementation doing so. Code ended up huge and messy, barely maintainable and the feature is not that important to achive project goals.</p> <p>In the end, author feels the way how was designed argparse library is not really designed to work this way, investigating more time would require extensive dig in argparse library. Also, author may understand why 3third party argument parsing library created their own implementations, as argparse seems a quite complicated library to extend or work with.</p>"},{"location":"architecture/0003-no-argparse-merging/#decision","title":"Decision","text":"<p>The change that we're proposing or have agreed to implement.</p> <p>Argparse definition merge will be not supported.</p>"},{"location":"architecture/0003-no-argparse-merging/#consequences","title":"Consequences","text":"<p>What becomes easier or more difficult to do and any risks introduced by the change that will need to be mitigated.</p> <p>This use case won't be supported, unless if someone come with an acceptable implementation.</p>"},{"location":"architecture/0004-motivations/","title":"4. Motivations","text":"<p>Date: 2025-01-27</p>"},{"location":"architecture/0004-motivations/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"architecture/0004-motivations/#context","title":"Context","text":"<p>The issue motivating this decision, and any context that influences or constrains the decision.</p> <p>Other alternatives:</p> <ul> <li>Current lib are heavy.</li> <li>Documentation is hard to understand</li> <li>Argparse API is at the same time amazing and awful</li> <li>None really fit to git-like applications</li> <li>Large programs become messy because lack of structure (functions/decorators)</li> </ul>"},{"location":"architecture/0004-motivations/#decision","title":"Decision","text":"<p>The change that we're proposing or have agreed to implement.</p> <p>Create the clak arg parser library over argparse.</p> <ul> <li>Improve developper UX: improve argparse usability for git-like CLI apps</li> <li>Use class, and use more pythonic mechanisms such as class inheritance</li> <li>Keep library light and portable</li> </ul>"},{"location":"architecture/0004-motivations/#consequences","title":"Consequences","text":"<p>What becomes easier or more difficult to do and any risks introduced by the change that will need to be mitigated.</p>"},{"location":"architecture/0005-comparison-with-cliff/","title":"5. Comparison with Cliff","text":"<p>Date: 2025-01-27</p>"},{"location":"architecture/0005-comparison-with-cliff/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"architecture/0005-comparison-with-cliff/#context","title":"Context","text":"<p>The issue motivating this decision, and any context that influences or constrains the decision.</p> <p>Cliff argparse is a powerful tool for creating CLI applications created by the openstack foundation. I really liked what deliver this library, but this library is meant to be really extensible, and thus complex. Also, it requires a lot of boilerplate to quickstart.</p> <p>Amazing:</p> <ul> <li>Designed for git-like commands</li> <li>Command discovery is probably the best from what we can do today</li> <li>Class based opinionated code structure</li> <li>Provide concept of views</li> </ul> <ul> <li>Battery included, completion, views and extendable</li> </ul> <p>Pros:</p> <ul> <li>Provide a flat structure for commands (hierarchy is managed as a flat list)</li> <li>very well designed for fully extendable CLI</li> </ul> <p>Cons:</p> <ul> <li>Learning curve is high</li> <li>Complex</li> <li>Large Boilerplate, multi file structure often too large for small projects</li> <li>Documentation is difficult, especially at the begining, the cliffdemo is almost required to understand how to use it.</li> <li>Extending the cli in python submodules implies editing settings in the package. It is sometime difficult to manage it correctly.</li> <li>Very powerful, but not very popular</li> </ul>"},{"location":"architecture/0005-comparison-with-cliff/#decision","title":"Decision","text":"<p>The change that we're proposing or have agreed to implement.</p>"},{"location":"architecture/0005-comparison-with-cliff/#consequences","title":"Consequences","text":"<p>What becomes easier or more difficult to do and any risks introduced by the change that will need to be mitigated.</p>"},{"location":"architecture/0006-comparison-with-click/","title":"6. Comparison with Click","text":"<p>Date: 2025-01-27</p>"},{"location":"architecture/0006-comparison-with-click/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"architecture/0006-comparison-with-click/#context","title":"Context","text":"<p>The issue motivating this decision, and any context that influences or constrains the decision.</p> <p>Amazing:</p> <ul> <li>Decorators on functions</li> <li>Very easy to start</li> </ul> <p>Pros:</p> <ul> <li>Hierarchy in nested structure</li> <li>Very low lerning curve</li> </ul> <p>Cons:</p> <ul> <li>Has the same limitation as typer in term of scability.</li> </ul>"},{"location":"architecture/0006-comparison-with-click/#decision","title":"Decision","text":"<p>The change that we're proposing or have agreed to implement.</p>"},{"location":"architecture/0006-comparison-with-click/#consequences","title":"Consequences","text":"<p>What becomes easier or more difficult to do and any risks introduced by the change that will need to be mitigated.</p>"},{"location":"architecture/0007-comparison-with-typer/","title":"7. Comparison with Typer","text":"<p>Date: 2025-01-27</p>"},{"location":"architecture/0007-comparison-with-typer/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"architecture/0007-comparison-with-typer/#context","title":"Context","text":"<p>The issue motivating this decision, and any context that influences or constrains the decision.</p> <p>Amazing:</p> <ul> <li>Heavy usage of python annotations</li> <li>Beautiful output</li> <li>Battery included, completion</li> <li>Functions args are actual python args/cli kwargs</li> <li>Rich library integration</li> </ul> <p>Pros:</p> <ul> <li>Low initial boilerplate, low learning curve</li> <li>Provide a nested structure for sub-commands (hierarchy is managed with parent/child relationship)</li> <li>Relatively easy to start</li> </ul> <p>Cons:</p> <ul> <li>Complex command lines can be make</li> <li>Changing things like help is difficult</li> <li>Executing group commands require extra function</li> <li>Documentation is extensive, but hard to follow</li> <li>Large programs does not fit well</li> <li>Not dry, we end up to duplicate always the same args everywhere, especially in large apps</li> <li>Completion and startup time is somewhat slow.</li> </ul>"},{"location":"architecture/0007-comparison-with-typer/#decision","title":"Decision","text":"<p>The change that we're proposing or have agreed to implement.</p>"},{"location":"architecture/0007-comparison-with-typer/#consequences","title":"Consequences","text":"<p>What becomes easier or more difficult to do and any risks introduced by the change that will need to be mitigated.</p>"},{"location":"architecture/list/","title":"Architecture Decision Records","text":"<ul> <li>1. Record architecture decisions</li> <li>2. Argparse as main parser</li> <li>3. No argparse merging</li> <li>4. Motivations</li> <li>5. Comparison with Cliff</li> <li>6. Comparison with Click</li> <li>7. Comparison with Typer</li> </ul>"},{"location":"docs/advanced/","title":"Nested commands","text":""},{"location":"docs/advanced/#advanced-features-and-best-practices","title":"Advanced Features and Best Practices","text":""},{"location":"docs/advanced/#1-command-inheritance","title":"1. Command Inheritance","text":"<p>You can create a base command class to share functionality:</p> <pre><code>class BaseCommand(Parser):\n    def common_method(self):\n        pass\n\nclass SpecificCommand(BaseCommand):\n    def cli_run(self):\n        self.common_method()\n</code></pre>"},{"location":"docs/advanced/#2-argument-inheritance","title":"2. Argument Inheritance","text":"<p>Global arguments are accessible to subcommands:</p> <pre><code>class AppMain(Parser):\n    verbose = Argument(\"--verbose\", action=\"store_true\")\n\n    class SubCommand(Parser):\n        def cli_run(self, verbose=False, **_):\n            if verbose:\n                print(\"Verbose mode enabled\")\n</code></pre>"},{"location":"docs/advanced/#3-custom-help-messages","title":"3. Custom Help Messages","text":"<p>Override the default help behavior:</p> <pre><code>def cli_run(self, **_):\n    print(\"Custom usage information:\")\n    self.show_usage()\n    print(\"\\nDetailed help:\")\n    self.show_help()\n</code></pre>"},{"location":"docs/advanced/#4-command-organization-best-practices","title":"4. Command Organization Best Practices","text":"<ol> <li> <p>Logical Grouping:</p> <ul> <li>Group related commands under common parents</li> <li>Use meaningful command names</li> <li>Keep the hierarchy shallow (3-4 levels max)</li> </ul> </li> <li> <p>Argument Design:</p> <ul> <li>Put shared options in parent commands</li> <li>Use consistent naming across commands</li> <li>Provide sensible defaults</li> </ul> </li> <li> <p>Documentation:</p> <ul> <li>Write clear help messages</li> <li>Document command relationships</li> <li>Include examples in docstrings</li> </ul> </li> <li> <p>Code Structure:</p> <ul> <li>One class per command</li> <li>Use inheritance for shared behavior</li> <li>Keep command implementations focused</li> </ul> </li> </ol>"},{"location":"docs/advanced/#error-handling-and-validation","title":"Error Handling and Validation","text":"<ol> <li>Command Not Found:</li> </ol> <pre><code>def cli_run(self, **_):\n    if not hasattr(self, 'subcommand'):\n        print(\"No command specified\")\n        self.show_help()\n        return 1\n</code></pre> <ol> <li>Argument Validation:</li> </ol> <pre><code>def cli_run(self, name=None, **_):\n    if not name:\n        print(\"Error: NAME is required\")\n        return 1\n</code></pre>"},{"location":"docs/advanced/#testing-nested-commands","title":"Testing Nested Commands","text":"<ol> <li>Test Command Structure:</li> </ol> <pre><code>def test_command_structure():\n    app = AppMain()\n    assert hasattr(app, 'command1')\n    assert hasattr(app.command1, 'sub1')\n</code></pre> <ol> <li>Test Command Execution:</li> </ol> <pre><code>def test_command_execution():\n    app = AppMain()\n    result = app.dispatch(['command1', 'John'])\n    assert result == 0\n</code></pre>"},{"location":"docs/doc1/","title":"Kitchen dump","text":""},{"location":"docs/doc1/#next-steps","title":"Next Steps","text":"<p>After mastering these basics, you can explore more advanced features of Clak:</p> <ul> <li>Subcommands for complex applications</li> <li>Custom argument types and validation</li> <li>Error handling and user feedback</li> <li>Configuration file integration</li> <li>And more!</li> </ul> <p>Remember that Clak is built on top of Python's <code>argparse</code>, so you can leverage all its features while enjoying a more elegant, class-based interface.</p>"},{"location":"docs/doc1/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Documentation:</p> <ul> <li>Always provide docstrings for your parser class</li> <li>Use descriptive help messages for arguments</li> <li>Document the purpose of your <code>cli_run</code> method</li> </ul> </li> <li> <p>Argument Names:</p> <ul> <li>Use meaningful names for arguments</li> <li>Provide both long and short forms for optional arguments</li> <li>Follow command-line conventions (e.g., lowercase for options)</li> </ul> </li> <li> <p>Defaults and Validation:</p> <ul> <li>Provide sensible defaults when possible</li> <li>Use choices for restricted options</li> <li>Handle missing or invalid input gracefully</li> </ul> </li> <li> <p>Code Organization:</p> <ul> <li>Keep argument definitions clean and organized</li> <li>Group related arguments together</li> <li>Use type hints and docstrings for better code clarity</li> </ul> </li> </ol>"},{"location":"docs/execution/","title":"Make script executable","text":"<p>This guide explains different ways to make your Python scripts executable and runnable from the command line. Whether you're developing a simple script or a full CLI application, you'll learn how to:</p> <ul> <li>Run scripts directly with Python</li> <li>Make scripts executable on Unix-like systems</li> <li>Package scripts as command-line tools</li> <li>Use package managers like pip, Poetry, PDM and UV</li> </ul> <p>We'll cover best practices and common patterns for each approach.</p> <p>There are different ways:</p> <ul> <li>Direct call:<ul> <li><code>python script.py --help</code></li> <li><code>python script.py ...</code></li> </ul> </li> <li>Direct executable:<ul> <li><code>chmod +x script.py</code></li> <li><code>./script.py --help</code></li> <li><code>./script.py ...</code></li> </ul> </li> <li>Module call, when packaged:<ul> <li><code>python -m pkg --help</code></li> <li><code>python -m pkg ...</code></li> </ul> </li> </ul>"},{"location":"docs/execution/#without-package-managers","title":"Without package managers","text":""},{"location":"docs/execution/#with-python-interpreter","title":"With python interpreter","text":"<p>The simplest way is to call Python directly with your script:</p> <ol> <li> <p>Create your Python script:</p> <pre><code>import sys\n\ndef main():\n    print(\"Hello, World!\")\n    return 0\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n</code></pre> </li> <li> <p>Run the script:</p> </li> </ol> <pre><code>   python script.py --help\n   python script.py ...\n   ```\n\nThis method requires no additional setup or modifications to the script file.\n\n### As executable script\n\nTo make a Python script executable without using package managers, follow these steps:\n\n1. Add a shebang line at the beginning of your script:\n\n   ```python\n   #!/usr/bin/env python3\n\n   import sys\n\n   def main():\n       print(\"Hello, World!\")\n\n   if __name__ == \"__main__\":\n       sys.exit(main())\n   ```\n\n2. Make the script executable:\n\n   ```bash\n   chmod +x script.py\n   ```\n\n3. Run the script:\n\n   ```bash\n   ./script.py --help\n   # or from anywhere if the script is in $PATH\n   script.py --help\n\n   ```\n\n## With package managers\n\nHere's how to make your Python scripts executable using different package managers:\n\n### Setuptools\n\n1. Create a `setup.py`:\n\n   ```python\n   from setuptools import setup\n\n   setup(\n       name=\"your-package\",\n       version=\"0.1.0\",\n       packages=[\"your_package\"],\n       entry_points={\n           \"console_scripts\": [\n               \"your-command=your_package.main:main\",\n           ],\n       },\n   )\n   ```\n\n2. Install in development mode:\n\n   ```bash\n   pip install -e .\n   ```\n\n3. Run your command:\n\n   ```bash\n   your-command\n   ```\n\n### Poetry\n\n1. Configure `pyproject.toml`:\n\n   ```toml\n   [tool.poetry]\n   name = \"your-package\"\n   version = \"0.1.0\"\n   description = \"\"\n   authors = [\"Your Name &lt;your@email.com&gt;\"]\n\n   [tool.poetry.dependencies]\n   python = \"^3.8\"\n\n   [tool.poetry.scripts]\n   your-command = \"your_package.main:main\"\n   ```\n\n2. Install using Poetry:\n\n   ```bash\n   poetry install\n   ```\n\n3. Run your command:\n\n   ```bash\n   poetry run your-command\n\n   ```\n\n### PDM\n\n1. Configure `pyproject.toml`:\n\n   ```toml\n   [project]\n   name = \"your-package\"\n   version = \"0.1.0\"\n   dependencies = []\n\n   [project.scripts]\n   your-command = \"your_package.main:main\"\n   ```\n\n2. Install using PDM:\n\n   ```bash\n   pdm install\n   ```\n\n3. Run your command:\n\n   ```bash\n   pdm run your-command\n\n   ```\n\n### UV\n\n1. Configure `pyproject.toml` (similar to Poetry or PDM format):\n\n   ```toml\n   [project]\n   name = \"your-package\"\n   version = \"0.1.0\"\n   dependencies = []\n\n   [project.scripts]\n   your-command = \"your_package.main:main\"\n   ```\n\n2. Install using UV:\n\n   ```bash\n   uv pip install -e .\n   ```\n\n3. Run your command:\n\n   ```bash\n   your-command\n\n   ```\n\n### Best Practices\n\n1. Always use `sys.exit(main())` in your entry points for proper exit code handling\n2. Include proper argument parsing (e.g., using `argparse` or `click`)\n3. Use descriptive command names that don't conflict with existing system commands\n4. Provide proper documentation and help messages\n5. Handle errors gracefully\n\nExample of a well-structured entry point:\n\n```python\n#!/usr/bin/env python3\nimport argparse\nimport sys\n\ndef parse_args():\n    parser = argparse.ArgumentParser(description=\"Your command description\")\n    parser.add_argument(\"--option\", help=\"An option description\")\n    return parser.parse_args()\n\ndef main():\n    args = parse_args()\n    try:\n        # Your main logic here\n        return 0\n    except Exception as e:\n        print(f\"Error: {e}\", file=sys.stderr)\n        return 1\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n</code></pre>"},{"location":"docs/features/","title":"Features","text":"<ul> <li>Argparse friendly:<ul> <li>Reuse as much as possible from argparse, but allow a new modular way to built CLI.</li> <li>If you know argparse, then you already know how to use clak.</li> <li>Same API:<ul> <li><code>argparse.ArgumentParser()</code> becomes <code>class MyApp(Parser):</code></li> <li><code>.add_argument(...)</code> becomes <code>dest = Argument(...)</code></li> <li><code>.add_subparser(...)</code> becomes <code>subcmd1 = SubCommand(...)</code></li> </ul> </li> <li>Extended API:<ul> <li><code>.add_argument(\"--option\", \"o\", help=\"Optional argument\")</code> =&gt; <code>option = Opt(\"--option\", \"o\", help=\"Optional argument\")</code></li> <li><code>.add_argument(\"param\", help=\"Positional argument\")</code> =&gt; <code>param = Arg(help=\"Positional argument\")</code></li> <li><code>.add_suparser(...)</code> =&gt; <code>subcmd1 = Cmd(ChildrenParserClass, help=\"Subcommand help\")</code></li> </ul> </li> </ul> </li> </ul> <ul> <li>Class based approach:<ul> <li>Use Python class to provide declarative command line.</li> <li>Since we use class, we can take advantage of Python inheritance to create CLI.<ul> <li>Including organizing command in a tree structure.</li> <li>Inherit and share settings among different class, to allow maximum reusability.</li> </ul> </li> <li>Hide internal argparse implementation from user, so you can focus on your app.</li> </ul> </li> </ul> <ul> <li>Build git-like CLI with ease<ul> <li>Rely on arparse subparser functionality.</li> <li>Pythonic class based approach to represent.</li> <li>Each subcommands are <code>Parser</code> instances, referenced via the <code>SubCommand</code> field.</li> </ul> </li> </ul> <ul> <li>Easy sub-command discovery<ul> <li>All possible command are show in the root help</li> <li>All subcommands display indiviudal and customizable help message.</li> </ul> </li> </ul> <ul> <li>Modular components and reusable components:<ul> <li>Help:<ul> <li>Comprehensive help message with command tree display.</li> <li>Manage <code>--help</code> and <code>-h</code> flags.</li> <li>Easily change usage, description or epilog</li> </ul> </li> <li>Logging:<ul> <li>Configure and enable Basic Logger</li> <li>Provide per Node logger</li> <li>Provide <code>--verbose</code> and <code>-v,-vv,-vvv</code> flags</li> </ul> </li> <li>Config:<ul> <li>Use XDG Base Directory Specification to provide config files and directory paths.</li> <li>Load yaml, json, toml, ini files easily</li> </ul> </li> <li>Completion:<ul> <li>Provide <code>completion</code> or <code>--complete</code> flag to generate completion script.</li> <li>Support most common shell via the <code>argcomplete</code> library.</li> </ul> </li> <li>More to come ...<ul> <li>Environment var support</li> <li>Automatic app config reader/writer</li> </ul> </li> <li>Build your own:<ul> <li>Reuse your existing code, your favorite CLI options, put them in a library and ship it.</li> </ul> </li> </ul> </li> </ul>"},{"location":"docs/install/","title":"Installation","text":""},{"location":"docs/install/#package-installation","title":"Package Installation","text":"<p>Clak is a python library, and can be installed with any of the following methods.</p>"},{"location":"docs/install/#install-with-pip","title":"Install with pip","text":"<p>Tip</p> <p>Recommended for quickstart and evaluation..</p> <p>Install clak using pip:</p> <pre><code>pip install mrjk.clak\n</code></pre>"},{"location":"docs/install/#install-with-package-managers","title":"Install with package managers","text":"<p>Tip</p> <p>Recommended for production use.</p> <p>Install with your project manager:</p> <pre><code>poetry add mrjk.clak\npdm add mrjk.clak\nuv add mrjk.clak\n</code></pre>"},{"location":"docs/install/#install-from-git","title":"Install from git","text":"<p>Tip</p> <p>Recommended for development or testing specific versions.</p> <p>With pip, with <code>development</code> branch. Use <code>main</code> for stable version:</p> <pre><code>pip install git+https://github.com/mrjk/python-clak.git@develop\n</code></pre>"},{"location":"docs/install/#completion-support","title":"Completion support","text":"<p>Install argcomplete globally, required only once for all application using argcomplete:</p> <pre><code>activate-global-python-argcomplete\n</code></pre> <p>See also completion support in documentation.</p>"},{"location":"guides/guide_101/","title":"Getting Started with Clak","text":"<p>This guide will walk you through the basics of building command-line applications using Clak. We'll start with a minimal example and gradually explore more advanced features.</p>"},{"location":"guides/guide_101/#base-concepts","title":"Base Concepts","text":"<p>Clak is a Python library that simplifies the creation of command-line applications by providing an elegant, class-based interface on top of Python's <code>argparse</code>. The main components are:</p> <ul> <li><code>Parser</code>: The base class for your application</li> <li><code>Argument</code>: Class to define command-line arguments</li> <li><code>Command</code>: (Not shown in basic examples) Used for subcommands</li> </ul>"},{"location":"guides/guide_101/#minimal-example","title":"Minimal Example","text":"<p>Let's start with a minimal example called <code>script1.py</code>, that demonstrates the core concepts:</p> script1.py<pre><code>#!/usr/bin/env python3\n\nfrom clak import Argument, Parser  # (1)!\n\n\nclass AppMain(Parser):  # (2)!\n    \"\"\"Demo application with two arguments.\"\"\"  # (3)!\n\n    config = Argument(\n        \"--config\", \"-c\", help=\"Config file path\", default=\"config.yaml\"  # (4)!\n    )\n    name = Argument(\"NAME\", help=\"First Name\", nargs=\"?\")  # (5)!\n\n    def cli_run(self, config=None, name=None, **_):  # (6)!\n        \"\"\"The cli_run method holds the code to run\"\"\"\n\n        if name is None:\n            print(\"No name provided, please provide a name as first argument.\")\n            self.cli_exit(1)  # (7)!\n\n        print(f\"Store name '{name}' in config file: {config}\")\n\n\nif __name__ == \"__main__\":\n    AppMain()  # (8)!\n</code></pre> <ol> <li>Import <code>Parser</code> and <code>Argument</code> classes from clak</li> <li>Define the main parser class.<ul> <li>It must inherit from <code>Parser</code>.</li> </ul> </li> <li>Class docstring.<ul> <li>This will be reused in application help message.</li> </ul> </li> <li>Define an optional argument with a short and long form.<ul> <li>An optional argument always starts with <code>--</code> or <code>-</code>.</li> <li>We can use <code>Argument</code> class to define the argument, like it is possible with python standard <code>argparse</code> module, with the same syntax as <code>add_argument()</code> method.</li> </ul> </li> <li>Define a positional argument.<ul> <li>A positional argument always starts with a name, without <code>-</code> or <code>--</code>.</li> </ul> </li> <li>Define <code>cli_run()</code> method, this method will be executed when the command is run.<ul> <li>Drop here the code you want to execute when the command is run.</li> <li>Also, method parameters fits to your the above defined arguments. You can directly use them in your code.</li> <li>There are more arguments that can be passed, but since we don't need them here, we can ignore them with <code>**_</code>.</li> </ul> </li> <li>Exit with error code 1 if no name is provided.<ul> <li>This method is provided by clak. See other available methods here.</li> </ul> </li> <li>Create an application instance and process command line arguments with the <code>dispatch()</code> method.</li> </ol> <p>From, this example, we can either use <code>python</code> interpreter to run it. Clak automatically add the <code>-h</code> or <code>--help</code> argument to your application, so you can see the help message:</p> <pre><code>$ python script1.py --help\nusage: script1.py [-h] [--config CONFIG] [NAME]\n\nDemo application with two arguments.\n\npositional arguments:\n  NAME                        First Name (default: None)\n\noptions:\n  -h, --help                  show this help message and exit\n  --config CONFIG, -c CONFIG  Config file path (default: config.yaml)\n</code></pre> <p>Thus, we can try to call it:</p> <pre><code>$ python script1.py\nNo name provided, please provide a name as first argument.\n\n$ python script1.py John\nStore name 'John' in config file: config.yaml\n\n$ python script1.py John Doe\nusage: script1.py [-h] [--config CONFIG] [NAME]\nscript1.py: error: unrecognized arguments: Doe\n</code></pre> <p>It is also possible to run directly if you make your script executable:</p> <pre><code>$ chmod +x script1.py\n\n# You can directly run it\n$ ./script1.py --help\n$ ./script1.py\n$ ./script1.py John\n$ ./script1.py John Doe\n</code></pre> <p>This example shows:</p> <ol> <li>Creating a basic application class that inherits from Parser</li> <li>Defining two arguments:<ul> <li>An optional <code>--config</code> argument with a default value</li> <li>A positional <code>NAME</code> argument that's optional (<code>nargs=\"?\"</code>)</li> </ul> </li> <li>Implementing the <code>cli_run</code> method that receives the parsed arguments</li> </ol>"},{"location":"guides/guide_101/#advanced-arguments-example","title":"Advanced Arguments Example","text":"<p>Let's update our previous example with more fields:</p> script2.py<pre><code>#!/usr/bin/env python3\n\nfrom clak import Argument, Parser  # (1)!\n\n\nclass AppMain(Parser):\n    \"\"\"Demo application with many arguments.\"\"\"\n\n    # Boolean flag\n    force = Argument(\"--force\", \"-f\", action=\"store_true\", help=\"Force mode\")  # (2)!\n\n    # String with default\n    config = Argument(\"-c\", help=\"Config file path\", default=\"config.yaml\")  # (3)!\n\n    # Choice from predefined options\n    color = Argument(\n        \"--color\",  # (4)!\n        choices=[\"red\", \"green\", \"blue\", \"unknown\"],\n        default=\"unknown\",\n        help=\"Favorite color\",\n    )\n\n    # List of items (can be specified multiple times)\n    items = Argument(\"--items\", \"-m\", action=\"append\", help=\"Preferred items\")  # (5)!\n\n    # Required positional argument\n    name = Argument(\"NAME\", help=\"First Name\")  # (6)!\n\n    # Optional positional with default\n    surname = Argument(\"SURNAME\", nargs=\"?\", default=\"Doe\", help=\"Last Name\")  # (7)!\n\n    # List of remaining arguments\n    aliases = Argument(\n        \"ALIAS\", nargs=\"*\", default=[\"Bond\", \"agent 007\"], help=\"Aliases\"  # (8)!\n    )\n\n    def cli_run(  # (9)!\n        self,\n        name=None,\n        surname=None,\n        color=None,\n        aliases=None,\n        items=None,\n        force=False,\n        config=None,\n        **_,\n    ):\n        \"\"\"Run the application\"\"\"\n        if force:\n            print(f\"Force mode update config file: {config}\")\n        else:\n            print(f\"No force mode, config file: {config}\")\n\n        print(f\"Identity: {name} {surname or 'MISSING_SURNAME'}\")\n        print(f\"Favorite color is: {color}\")\n\n        for alias in aliases or []:\n            print(f\"  Alias: {alias}\")\n\n        for item in items or []:\n            print(f\"  Item: {item}\")\n\n\nif __name__ == \"__main__\":\n    AppMain()  # (10)!\n</code></pre> <ol> <li> <p>Import <code>Parser</code> and <code>Argument</code> classes from clak</p> </li> <li> <p>Boolean Flags (<code>force</code>):</p> <ul> <li>Uses <code>action=\"store_true\"</code> to create a flag</li> <li>No value needed, just presence/absence</li> <li>Use both long and short form</li> </ul> </li> <li> <p>String Options (<code>config</code>):</p> <ul> <li>Basic string argument with default value</li> <li>Can be specified with <code>-c</code></li> <li>Use short form only</li> </ul> </li> <li> <p>Choice Options (<code>color</code>):</p> <ul> <li>Restricts input to predefined choices</li> <li>Provides validation out of the box</li> <li>Can be specified with <code>--color</code></li> <li>Use long form only</li> </ul> </li> <li> <p>List Arguments (<code>items</code>):</p> <ul> <li>Uses <code>action=\"append\"</code> to collect multiple values</li> <li>Can be specified multiple times: <code>-m item1 -m item2</code></li> </ul> </li> <li> <p>Positional Arguments:</p> <ul> <li>Required (<code>name</code>): Must be provided</li> </ul> </li> <li> <p>Optional Positional Arguments (<code>surname</code>):</p> <ul> <li>Optional with default (<code>surname</code>): Uses <code>nargs=\"?\"</code> and <code>default</code></li> </ul> </li> <li> <p>Variable number of arguments (<code>aliases</code>):</p> <ul> <li>Variable number (<code>aliases</code>): Uses <code>nargs=\"*\"</code> for zero or more</li> </ul> </li> <li> <p>Run method (<code>cli_run</code>):</p> <ul> <li>This method is executed when the command is run.</li> <li>It receives the parsed arguments as keyword arguments.</li> <li>You can directly use them in your code.</li> </ul> </li> <li> <p>Instanciate App (<code>AppMain</code>):</p> <ul> <li>This actually start the app and parse arguments</li> </ul> </li> </ol> <p>When executed with <code>-h</code> or <code>--help</code>:</p> <pre><code>$ python script2.py -h\nusage: script2.py [-h] [--force] [-c CONFIG] [--color {red,green,blue,unknown}] [--items ITEMS]\n                  NAME [SURNAME] [ALIAS ...]\n\nDemo application with many arguments.\n\npositional arguments:\n  NAME                        First Name\n  SURNAME                     Last Name (default: Doe)\n  ALIAS                       Aliases (default: ['Bond', 'agent 007'])\n\noptions:\n  -h, --help                  show this help message and exit\n  --force, -f                 Force mode (default: False)\n  -c CONFIG                   Config file path (default: config.yaml)\n  --color {red,green,blue,unknown}\n                              Favorite color (default: unknown)\n  --items ITEMS, -m ITEMS     Preferred items (default: None)\n</code></pre>"},{"location":"guides/guide_101/#example-usage","title":"Example Usage","text":"<pre><code># Basic usage\npython script2.py John Smith\n\n# With options\npython script2.py --force --config custom.yaml John Smith\n\n# With color choice\npython script2.py --color red John Smith\n\n# With multiple items\npython script2.py --items apple --items banana John Smith\n\n# With aliases\npython script2.py John Smith nickname1 nickname2 nickname3\n\n# Full example\npython script2.py --force --config custom.yaml --color blue \\\n                --items apple --items banana \\\n                John Smith nickname1 nickname2\n</code></pre>"},{"location":"guides/guide_101/#next-steps","title":"Next Steps","text":"<p>In this guide, we learned how to create basic command-line interfaces using Clak's class-based approach, from simple flags to more complex argument types.</p> <p>Now let's explore how Clak handles nested command structures to build more sophisticated CLI applications with subcommands and hierarchical options.</p>"},{"location":"guides/guide_102/","title":"Nested Command-Line Applications with Clak","text":"<p>This guide explores advanced features of Clak, focusing on nested commands and complex command-line structures. We'll learn how to build sophisticated command-line applications with subcommands, similar to tools like <code>git</code> or <code>docker</code>.</p>"},{"location":"guides/guide_102/#nested-commands-basics","title":"Nested Commands Basics","text":"<p>Nested commands (also known as subcommands) allow you to create hierarchical command-line interfaces. Let's start with a basic example:</p> script3.py<pre><code>#!/usr/bin/env python3\n\nfrom clak import Argument, Command, Parser\n\n\nclass AppCommand1(Parser):  # (1)!\n    \"Command 1, which says hello\"\n    force = Argument(\"--force\", \"-f\", action=\"store_true\", help=\"Force\")  # (2)!\n\n    def cli_run(self, force=None, **_):  # (3)!\n        force = \"with the force\" if force else \"without the force\"\n        print(f\"Run Command 1: Hello {force}\")\n\n\nclass AppCommand2(Parser):  # (4)!\n    \"Command 2, with option and positional arguments\"\n    aliases = Argument(\"--alias\", \"-a\", action=\"append\", help=\"Alias\")  # (5)!\n    name = Argument(\"NAME\", help=\"Name\")\n\n    def cli_run(self, name=None, aliases=None, force=False, config=None, **_):  # (6)!\n        print(f\"Run command 2 World on: {name} in '{config}' file (force_mode={force})\")\n        for alias in aliases or []:\n            print(f\"Map: {alias} -&gt; {name}\")\n\n\nclass AppMain(Parser):  # (7)!\n    \"\"\"Demo application with options and two subcommands.\"\"\"\n\n    debug = Argument(\"--debug\", action=\"store_true\", help=\"Enable debug mode\")  # (8)!\n    config = Argument(\"--config\", \"-c\", help=\"Config file path\", default=\"config.yaml\")\n\n    # Define subcommands\n    command1 = Command(AppCommand1, help=\"Execute command 1\")  # (9)!\n    command2 = Command(AppCommand2, help=\"Execute command 2\")  # (10)!\n\n\nif __name__ == \"__main__\":\n    AppMain()\n</code></pre> <ol> <li>Create a first sublevel <code>Parser</code> class.<ul> <li>Like root <code>Parser</code>, it must inherit from <code>Parser</code>.</li> </ul> </li> <li>Specific options <code>force</code> for only this subcommand</li> <li>Define <code>cli_run()</code> method, this method will be executed when the subcommand is run.</li> <li>Create second subcommand <code>Parser</code> class.<ul> <li>Like root <code>Parser</code>, it must inherit from <code>Parser</code>.</li> </ul> </li> <li>Define specific options for this subcommand</li> <li>Define <code>cli_run()</code> method, this method will be executed when the subcommand is run.</li> <li>Create main top level <code>Parser</code> class.<ul> <li>It must inherit from <code>Parser</code>.</li> <li>Define global options for the application</li> <li>Will contains our two subcommands</li> </ul> </li> <li>Top level options<ul> <li>Define global options for the application</li> <li>Options will be accessible by the subcommands</li> </ul> </li> <li>Bind subcommand <code>AppCommand1</code> to the main parser<ul> <li>Use <code>Command</code> class to bind subcommands to the main parser</li> <li>It use internal <code>argparse</code> subparser to handle subcommands</li> </ul> </li> <li>Bind subcommand <code>AppCommand2</code> to the main parser</li> </ol> <p>This example demonstrates:</p> <ol> <li>A main parser (<code>AppMain</code>) with global options</li> <li>Two subcommands (<code>command1</code> and <code>command2</code>)</li> <li>Each subcommand with its own arguments and behavior</li> </ol> <p>Usage:</p> Main help messageCommand1 help messageCommand2 help message <p>The main help message is:</p> <pre><code>$ ./script3.py --help\nusage: script3.py [-h] [--debug] [--config CONFIG] {command1,command2} ...\n\nDemo application with options and two subcommands.\n\npositional arguments:\n\nsubcommands:\n  command1                  Execute command 1\n  command2                  Execute command 2\n\noptions:\n  -h, --help                  show this help message and exit\n  --debug                     Enable debug mode (default: False)\n  --config CONFIG, -c CONFIG  Config file path (default: config.yaml)\n</code></pre> <p>While <code>command1</code> help message is:</p> <pre><code>$ ./script3.py command1 --help\nusage: script3.py command1 [-h] [--force]\n\nCommand 1, which says hello\n\noptions:\n  -h, --help   show this help message and exit\n  --force, -f  Force (default: False)\n</code></pre> <p>And <code>command2</code> help message is:</p> <pre><code>$ ./script3.py command2 --help\nusage: script3.py command2 [-h] [--alias ALIASES] NAME\n\nCommand 2, with option and positional arguments\n\npositional arguments:\n  NAME                        Name\n\noptions:\n  -h, --help                  show this help message and exit\n  --alias ALIASES, -a ALIASES\n                              Alias (default: None)\n</code></pre> <p>Usage examples:</p> <pre><code># Using command1\npython script3.py command1 --force\n\n# Using command2\npython script3.py command2 --alias nickname1 --alias nickname2 John\n</code></pre>"},{"location":"guides/guide_102/#deep-nested-commands","title":"Deep Nested Commands","text":"<p>For more complex applications, you might need multiple levels of commands. Let's say we want to create a command structure like:</p> <pre><code>app\n\u2514\u2500\u2500 command1\n    \u251c\u2500\u2500 sub1\n    \u2514\u2500\u2500 sub2\n        \u251c\u2500\u2500 sub2a\n        \u2514\u2500\u2500 sub2b\n</code></pre> <p>Here's how to implement deeper command hierarchies:</p> script4.py<pre><code>#!/usr/bin/env python3\n\n\nfrom clak import Argument, Command, Parser\n\n\n# Base action class for reusability\nclass AppSubAction(Parser):\n    \"Default action to illustrate subcommand reusability\"\n\n    def cli_run(self, args, **_):\n        print(f\"Command called with args: {args}\")\n\n\n# Level 3 commands\nclass SubSubCommand2a(AppSubAction):\n    \"SubSubCommand2a\"\n    args = Argument(\"ARGS\", nargs=\"+\", help=\"One or more arguments\")\n\n\nclass SubSubCommand2b(Parser):\n    \"SubSubCommand2b\"\n    args = Argument(\"ARGS\", nargs=\"*\", help=\"Zero or more arguments\")\n\n\n# Level 2 commands\nclass SubCommand1(AppSubAction):\n    \"SubCommand1\"\n    args = Argument(\"ARGS\", nargs=\"*\", help=\"Zero or more arguments\")\n\n\nclass SubCommand2(AppSubAction):\n    \"SubCommand2\"\n    sub2a = Command(SubSubCommand2a)\n    sub2b = Command(SubSubCommand2b)\n\n\n# Level 1 commands\nclass AppCommand1(Parser):\n    \"Command 1, which says hello\"\n    force = Argument(\"--force\", \"-f\", action=\"store_true\", help=\"Force\")\n    name = Argument(\"NAME\", help=\"Name\")\n\n    sub1 = Command(SubCommand1)\n    sub2 = Command(SubCommand2)\n\n    def cli_run(self, force=None, name=None, **_):\n        print(f\"Run Command 1: Hello {name}\")\n\n\nclass AppMain(Parser):\n    \"\"\"Demo application with deep nested commands\"\"\"\n\n    debug = Argument(\"--debug\", action=\"store_true\", help=\"Enable debug mode\")\n    config = Argument(\"--config\", \"-c\", help=\"Config file path\", default=\"config.yaml\")\n\n    command1 = Command(AppCommand1, help=\"Execute command 1\")\n\n\nif __name__ == \"__main__\":\n    AppMain()\n</code></pre> <p>The help message is now:</p> <pre><code>$ ./script4.py --help\nusage: script4.py [-h] [--debug] [--config CONFIG] {command1} ...\n\nDemo application with deep nested commands\n\npositional arguments:\n\nsubcommands:\n  command1                  Execute command 1                        \n  command1 sub1             SubCommand1                              \n  command1 sub2             SubCommand2                              \n  command1 sub2 sub2a       SubSubCommand2a                          \n  command1 sub2 sub2b       SubSubCommand2b                          \n\noptions:\n  -h, --help                  show this help message and exit\n  --debug                     Enable debug mode (default: False)\n  --config CONFIG, -c CONFIG  Config file path (default: config.yaml)\n</code></pre> <p>Usage examples:</p> <pre><code># Using top-level command\npython script.py command1 John\n\n# Using nested command\npython script.py command1 sub2 sub2a arg1 arg2\n\n# Using global options with nested commands\npython script.py --debug command1 sub2 sub2a arg1 arg2\n</code></pre>"},{"location":"guides/guide_102/#next-steps","title":"Next Steps","text":"<p>After mastering nested commands, you can explore:</p> <ul> <li>Command plugins and dynamic loading</li> <li>Custom argument types</li> <li>Command aliases</li> <li>Shell completion</li> <li>Configuration file integration</li> <li>Interactive command modes</li> </ul> <p>Remember that well-designed command-line interfaces make your tools more user-friendly and maintainable. Take time to plan your command hierarchy and argument structure before implementation.</p>"},{"location":"guides/guide_103/","title":"Advanced Usage","text":"<p>Clak provide a bunch of functionnalities out of the box.</p>"},{"location":"guides/guide_103/#integrated-fetaures","title":"Integrated fetaures","text":"<ul> <li>Automatic environment variable parsing</li> <li>Error and exception handling</li> <li>Automatic management of <code>--help</code> and <code>-h</code> flags</li> </ul> <p>TODO: Where is the ref ???</p>"},{"location":"guides/guide_103/#advanced-customization","title":"Advanced customization","text":"<p>Some behavior can be overriden on a per node or per argument basis.</p>"},{"location":"guides/guide_103/#arguments-customization","title":"Arguments customization","text":"<p>Arguments are defined directly in classes, via the <code>Argument</code> class. This class accept a number of parameters that bring you a lot of flexibility on how arguments are parsed.</p> <p>TODO: Where is the ref ???</p>"},{"location":"guides/guide_103/#parsers-meta","title":"Parsers <code>Meta</code>","text":"<p>The <code>Meta</code> class allows to change some behaviors of the parser. For example:</p> <pre><code>class MyApp(Parser):\n\n    class Meta:\n        app_name = \"My app name\"\n        env_prefix = \"MY_APP_ENV_PREFIX\"\n</code></pre> <p>TODO: Where is the ref ???</p>"},{"location":"guides/guide_104/","title":"Applications components","text":"<p>Components are pluggable features to your parser classes. They can provide arguments or they can also behave on the whole parser tree behavior. More detrails on components can be found in the dedicated documentation</p>"},{"location":"guides/guide_104/#logging-component","title":"Logging component","text":"<p>This component provides logging features to your application:</p> script5.py<pre><code>#!/usr/bin/env python3\n\n\nfrom clak import Argument, Command, Parser\n\n\n# Base action class for reusability\nclass AppSubAction(Parser):\n    \"Default action to illustrate subcommand reusability\"\n\n    def cli_run(self, args, **_):\n        print(f\"Command called with args: {args}\")\n\n\n# Level 3 commands\nclass SubSubCommand2a(AppSubAction):\n    \"SubSubCommand2a\"\n    args = Argument(\"ARGS\", nargs=\"+\", help=\"One or more arguments\")\n\n\nclass SubSubCommand2b(Parser):\n    \"SubSubCommand2b\"\n    args = Argument(\"ARGS\", nargs=\"*\", help=\"Zero or more arguments\")\n\n\n# Level 2 commands\nclass SubCommand1(AppSubAction):\n    \"SubCommand1\"\n    args = Argument(\"ARGS\", nargs=\"*\", help=\"Zero or more arguments\")\n\n\nclass SubCommand2(AppSubAction):\n    \"SubCommand2\"\n    sub2a = Command(SubSubCommand2a)\n    sub2b = Command(SubSubCommand2b)\n\n\nclass AppMain(Parser):\n    \"\"\"Demo application with deep nested commands\"\"\"\n\n    debug = Argument(\"--debug\", action=\"store_true\", help=\"Enable debug mode\")\n    config = Argument(\"--config\", \"-c\", help=\"Config file path\", default=\"config.yaml\")\n\n    sub1 = Command(SubCommand1)\n    sub2 = Command(SubCommand2)\n\n\nif __name__ == \"__main__\":\n    AppMain()\n</code></pre>"},{"location":"guides/guide_104/#completion-component","title":"Completion component","text":"<p>TODO</p>"},{"location":"guides/guide_104/#config-component","title":"Config component","text":"<p>TODO</p>"},{"location":"project/CODE_OF_CONDUCT/","title":"Code of Conduct","text":""},{"location":"project/CODE_OF_CONDUCT/#contributor-covenant-code-of-conduct","title":"Contributor Covenant Code of Conduct","text":""},{"location":"project/CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"project/CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"project/CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"project/CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"project/CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"project/CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"project/CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"project/CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"project/CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"project/CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"project/CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"project/CONTRIBUTING/","title":"Contributing","text":""},{"location":"project/CONTRIBUTING/#contributing-to-project","title":"Contributing to Project","text":"<p>First off, thanks for taking the time to contribute! \u2764\ufe0f</p> <p>All types of contributions are encouraged and valued. See the Table of Contents for different ways to help and details about how this project handles them. Please make sure to read the relevant section before making your contribution. It will make it a lot easier for us maintainers and smooth out the experience for all involved. The community looks forward to your contributions. \ud83c\udf89</p> <p>And if you like the project, but just don't have time to contribute, that's fine. There are other easy ways to support the project and show your appreciation, which we would also be very happy about:</p> <ul> <li>Star the project</li> <li>Tweet about it</li> <li>Refer this project in your project's readme</li> <li>Mention the project at local meetups and tell your friends/colleagues</li> </ul>"},{"location":"project/CONTRIBUTING/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Code of Conduct</li> <li>I Have a Question</li> <li>I Want To Contribute<ul> <li>Reporting Bugs</li> <li>Suggesting Enhancements</li> <li>Your First Code Contribution</li> <li>Improving The Documentation</li> </ul> </li> <li>Styleguides<ul> <li>Commit Messages</li> </ul> </li> <li>Join The Project Team</li> </ul>"},{"location":"project/CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>This project and everyone participating in it is governed by the Code of Conduct. By participating, you are expected to uphold this code. Please report unacceptable behavior to <code>&lt;mrjk _DOT_ 78 _AT_ gmail.com&gt;</code>.</p>"},{"location":"project/CONTRIBUTING/#i-have-a-question","title":"I Have a Question","text":"<p>If you want to ask a question, we assume that you have read the available Documentation.</p> <p>Before you ask a question, it is best to search for existing Issues that might help you. In case you have found a suitable issue and still need clarification, you can write your question in this issue. It is also advisable to search the internet for answers first.</p> <p>If you then still feel the need to ask a question and need clarification, we recommend the following:</p> <ul> <li>Open an Issue.</li> <li>Provide as much context as you can about what you're running into.</li> <li>Provide project and platform versions (nodejs, npm, etc), depending on what seems relevant.</li> </ul> <p>We will then take care of the issue as soon as possible.</p>"},{"location":"project/CONTRIBUTING/#i-want-to-contribute","title":"I Want To Contribute","text":""},{"location":"project/CONTRIBUTING/#legal-notice","title":"Legal Notice","text":"<p>When contributing to this project, you must agree that you have authored 100% of the content, that you have the necessary rights to the content and that the content you contribute may be provided under the project license.</p>"},{"location":"project/CONTRIBUTING/#reporting-bugs","title":"Reporting Bugs","text":""},{"location":"project/CONTRIBUTING/#before-submitting-a-bug-report","title":"Before Submitting a Bug Report","text":"<p>A good bug report shouldn't leave others needing to chase you up for more information. Therefore, we ask you to investigate carefully, collect information and describe the issue in detail in your report. Please complete the following steps in advance to help us fix any potential bug as fast as possible.</p> <ul> <li>Make sure that you are using the latest version.</li> <li>Determine if your bug is really a bug and not an error on your side e.g. using incompatible environment components/versions (Make sure that you have read the documentation. If you are looking for support, you might want to check this section).</li> <li>To see if other users have experienced (and potentially already solved) the same issue you are having, check if there is not already a bug report existing for your bug or error in the bug tracker.</li> <li>Also make sure to search the internet (including Stack Overflow) to see if users outside of the GitHub community have discussed the issue.</li> <li>Collect information about the bug:<ul> <li>Stack trace (Traceback)</li> <li>OS, Platform and Version (Windows, Linux, macOS, x86, ARM)</li> <li>Version of the interpreter, compiler, SDK, runtime environment, package manager, depending on what seems relevant.</li> <li>Possibly your input and the output</li> <li>Can you reliably reproduce the issue? And can you also reproduce it with older versions?</li> </ul> </li> </ul>"},{"location":"project/CONTRIBUTING/#how-do-i-submit-a-good-bug-report","title":"How Do I Submit a Good Bug Report?","text":"<p>You must never report security related issues, vulnerabilities or bugs including sensitive information to the issue tracker, or elsewhere in public. Instead sensitive bugs must be sent by email to contact@mrjk.com.</p> <p>We use GitHub issues to track bugs and errors. If you run into an issue with the project:</p> <ul> <li>Open an Issue. (Since we can't be sure at this point whether it is a bug or not, we ask you not to talk about a bug yet and not to label the issue.)</li> <li>Explain the behavior you would expect and the actual behavior.</li> <li>Please provide as much context as possible and describe the reproduction steps that someone else can follow to recreate the issue on their own. This usually includes your code. For good bug reports you should isolate the problem and create a reduced test case.</li> <li>Provide the information you collected in the previous section.</li> </ul> <p>Once it's filed:</p> <ul> <li>The project team will label the issue accordingly.</li> <li>A team member will try to reproduce the issue with your provided steps. If there are no reproduction steps or no obvious way to reproduce the issue, the team will ask you for those steps and mark the issue as <code>needs-repro</code>. Bugs with the <code>needs-repro</code> tag will not be addressed until they are reproduced.</li> <li>If the team is able to reproduce the issue, it will be marked <code>needs-fix</code>, as well as possibly other tags (such as <code>critical</code>), and the issue will be left to be implemented by someone.</li> </ul>"},{"location":"project/CONTRIBUTING/#suggesting-enhancements","title":"Suggesting Enhancements","text":"<p>This section guides you through submitting an enhancement suggestion for clak, including completely new features and minor improvements to existing functionality. Following these guidelines will help maintainers and the community to understand your suggestion and find related suggestions.</p>"},{"location":"project/CONTRIBUTING/#before-submitting-an-enhancement","title":"Before Submitting an Enhancement","text":"<ul> <li>Make sure that you are using the latest version.</li> <li>Read the documentation carefully and find out if the functionality is already covered, maybe by an individual configuration.</li> <li>Perform a search to see if the enhancement has already been suggested. If it has, add a comment to the existing issue instead of opening a new one.</li> <li>Find out whether your idea fits with the scope and aims of the project. It's up to you to make a strong case to convince the project's developers of the merits of this feature. Keep in mind that we want features that will be useful to the majority of our users and not just a small subset. If you're just targeting a minority of users, consider writing an add-on/plugin library.</li> </ul>"},{"location":"project/CONTRIBUTING/#how-do-i-submit-a-good-enhancement-suggestion","title":"How Do I Submit a Good Enhancement Suggestion?","text":"<p>Enhancement suggestions are tracked as GitHub issues.</p> <ul> <li>Use a clear and descriptive title for the issue to identify the suggestion.</li> <li>Provide a step-by-step description of the suggested enhancement in as many details as possible.</li> <li>Describe the current behavior and explain which behavior you expected to see instead and why. At this point you can also tell which alternatives do not work for you.</li> <li>You may want to include screenshots and animated GIFs which help you demonstrate the steps or point out the part which the suggestion is related to. You can use this tool to record GIFs on macOS and Windows, and this tool or this tool on Linux. </li> <li>Explain why this enhancement would be useful to most clak users. You may also want to point out the other projects that solved it better and which could serve as inspiration.</li> </ul>"},{"location":"project/CONTRIBUTING/#your-first-code-contribution","title":"Your First Code Contribution","text":"<p>Please learn how to configure your development envrionment then how to contribute to clak.</p>"},{"location":"project/CONTRIBUTING/#improving-the-documentation","title":"Improving The Documentation","text":"<p>Please check related documentation</p>"},{"location":"project/CONTRIBUTING/#styleguides","title":"Styleguides","text":""},{"location":"project/CONTRIBUTING/#commit-messages","title":"Commit Messages","text":"<p>Please check related documentation</p>"},{"location":"project/CONTRIBUTING/#join-the-project-team","title":"Join The Project Team","text":"<p>Please contact main maintener.</p>"},{"location":"project/CONTRIBUTING/#attribution","title":"Attribution","text":"<p>This guide is based on the contributing-gen. Make your own!</p>"},{"location":"project/license/","title":"GNU GPL","text":"<pre><code>                                                     GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. &lt;https://fsf.org/&gt;\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    &lt;one line to give the program's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    &lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n&lt;https://www.gnu.org/licenses/&gt;.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n&lt;https://www.gnu.org/licenses/why-not-lgpl.html&gt;.\n</code></pre>"},{"location":"quickstart/install/","title":"Installation","text":""},{"location":"quickstart/install/#clak-installation","title":"Clak Installation","text":"<p>Clak is a python library, and can be installed with any of the following methods.</p> <p>Install clak using pip:</p> <pre><code>pip install mrjk.clak\n</code></pre> <p>Or install with your project manager:</p> <pre><code>poetry add mrjk.clak\npdm add mrjk.clak\nuv add mrjk.clak\n</code></pre> <p>For more installation methods, please check detailed installation documentation.</p>"},{"location":"quickstart/quickstart/","title":"Quickstart","text":"<p>To create an 2 commands hello world example, create a new <code>demo.py</code> file with this content:</p> hello.py<pre><code>#!/usr/bin/env python3\n\nfrom clak import Parser, Argument, Command\n\nclass AppCommand1(Parser):  # (1)!\n    \"Command 1, which says hello\"\n    force = Argument(\"--force\", \"-f\", action=\"store_true\", help=\"Force\")  # (2)!\n\n    def cli_run(self, force=None, debug=False, **_):  # (3)!\n        print(f\"Run Command 1: Hello force={force}\")\n        if debug:\n            print(\"Debug mode enabled\")\n\nclass AppCommand2(Parser):  # (4)!\n    \"Command 2, with option and positional arguments\"\n    aliases = Argument(\"--alias\", \"-a\", action=\"append\", help=\"Alias\")  # (5)!\n    name = Argument(\"NAME\", help=\"Name\")\n\n    def cli_run(self, name=None, aliases=None, force=False, config=None, **_):  # (6)!\n        print(f\"Run command 2 World on: {name} in '{config}' file (force_mode={force})\")\n        for alias in aliases or []:\n            print(f\"Map: {alias} -&gt; {name}\")\n\nclass AppMain(Parser):  # (7)!\n    \"\"\"Demo application with options and two subcommands.\"\"\"\n    debug = Argument(\"--debug\", action=\"store_true\", help=\"Enable debug mode\")  # (8)!\n    config = Argument(\"--config\", \"-c\", help=\"Config file path\", default=\"config.yaml\")\n\n    # Define subcommands\n    command1 = Command(AppCommand1)  # (9)!\n    command2 = Command(AppCommand2)  # (10)!\n\nif __name__ == \"__main__\":\n    AppMain()\n</code></pre> <p>Make it executable (or call it with python interpreter) and try command flags:</p> <pre><code>python hello.py --help\nusage: hello.py [-h] [--debug] [--config CONFIG] {command1,command2} ...\n\nDemo application with options and two subcommands.\n\npositional arguments:\n\nsubcommands:\n  command1                  Execute command 1\n  command2                  Execute command 2\n\noptions:\n  -h, --help                  show this help message and exit\n  --debug                     Enable debug mode (default: False)\n  --config CONFIG, -c CONFIG  Config file path (default: config.yaml)\n</code></pre>"},{"location":"quickstart/quickstart/#what-next","title":"What next ?","text":"<p>You can either follow the guides or dive into the technical documentation.</p> <p>Reference documentation is available in the API reference.</p>"}]}